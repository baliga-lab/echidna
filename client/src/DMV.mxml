<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" backgroundColor="white" pageTitle="DMV -- ratios"
	applicationComplete="init()" xmlns:bridge="bridge.*" xmlns:ui="flex.utils.ui.*" >
	<bridge:FABridge bridgeName="flex"/>
	<mx:Label x="115" y="797" id="gaggleStatus" width="332"/>
	<!-- IMPORTANT! Note that creationPolicy for TabNavigator is set to null by default (it's supposed to be set to auto). 
		 So we need to set it to "all" here or we will have issues that will be hard to figure out. -->
	<mx:TabNavigator id="tabNavigator" x="119" y="99" width="948" height="649" change="onTabChanged()" creationPolicy="all">
		<mx:Canvas id="ratiosCanvas" label="ratios" width="100%" height="100%">
			<mx:DataGrid id="ratiosGrid" x="10" y="10" width="917" height="585" dataProvider="{ratiosData}" allowMultipleSelection="true"
				itemClick="gridClick(event)" change="dmvSelectionChanged(event)">
			</mx:DataGrid>
		</mx:Canvas>
		<mx:Canvas id="lambdasCanvas" label="lambdas" width="100%" height="100%">
			<mx:DataGrid id="lambdasGrid" x="10" y="10" width="917" height="585" dataProvider="{lambdasData}" allowMultipleSelection="true"
				itemClick="gridClick(event)" change="dmvSelectionChanged(event)">
			</mx:DataGrid>
		</mx:Canvas>
	</mx:TabNavigator>
	<mx:Label x="115" y="757" text="Number of selected rows:" width="149"/>
	<mx:Text x="272" y="757" width="39" id="numSelectedRowsText" text="0"/>
	<mx:Button x="319" y="755" label="Clear Selections" id="clearSelectionsButton" click="clearSelections()"/>
	<mx:Label x="443" y="757" width="131" id="loadingLabel"/>
	<mx:Button x="596" y="755" label="Plot" id="plotButton" click="showPlot()"/>


	<mx:Script>
	
		
		<![CDATA[
			import org.hasseg.externalMouseWheel.ExternalMouseWheelSupport;
			import flex.utils.ui.DataGridToolTipColumn;
			import mx.utils.URLUtil;
			import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import flash.utils.getTimer;
			import mx.managers.PopUpManager;
			import org.systemsbiology.echidna.dialog.PlotDialog;
			import mx.controls.Alert;
			import org.systemsbiology.echidna.events.DMVSelectionChangedEvent;
			import mx.events.ListEvent;
			import mx.events.ItemClickEvent;
			import com.adobe.serialization.json.JSON;
			import mx.rpc.events.ResultEvent;
			import org.systemsbiology.echidna.common.Util;
			import org.systemsbiology.echidna.ui.checkboxColumns.CheckBoxItemRenderer;
			import org.systemsbiology.echidna.ui.checkboxColumns.CheckBoxHeaderRenderer;
			import org.systemsbiology.echidna.ui.checkboxColumns.CheckBoxHeaderColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.collections.ArrayCollection;


			[Bindable]
			protected var ratiosData:ArrayCollection = new ArrayCollection();

			[Bindable]
			protected var lambdasData:ArrayCollection = new ArrayCollection();



			protected var tabs:Array = new Array();
			private var bm:IBrowserManager;
			
			private var groupId:String;
			private var conditionIds:String;
			private var dataProvided:Boolean = false;


			protected function init():void {
				var _mwSupport:ExternalMouseWheelSupport = ExternalMouseWheelSupport.getInstance(stage); 
				bm = BrowserManager.getInstance();
				bm.init("","DMV - ratios");
				
				trace("policy: " + tabNavigator.creationPolicy);
				
				groupId = Util.getQueryStringItem(bm, "groupId");
				conditionIds = Util.getQueryStringItem(bm, "conditionIds");
				
				trace("group id = " + groupId);
				
				trace("DMV init.");
				setupTabs();
				
				if (groupId != null || conditionIds != null) {
					dataProvided = true;
				}
				
				if (dataProvided) {
					loadingLabel.text = "Loading data...";
					var params:Object = getParamsObject();
					Util.ajax(params['url'],params, onGotData, Util.ajaxFault);
				
				} else {
					loadingLabel.text = "No data selected.";
				}
			}
			
			private function getParamsObject(ratios:Boolean = true):Object {
				var ret:Object = new Object();
				if (ratios) {
					ret['data_type'] = 'ratio';
				} else {
					ret['data_type'] = 'lambda';
				}
				if (groupId != null) {
					ret['url'] = "main/get_data_for_group";
					ret['group_id'] = groupId;
				} else if (conditionIds != null) {
					ret['url'] = "main/get_data_for_conditions";
					ret['condition_ids'] = conditionIds;
				}
				return ret;	
			}
			
			/*
			protected function getGroupId():int {
				trace("bm: " + bm);
				trace("bm.base = " + bm.base);
				trace("bm.url = " + bm.url);
				var segs:Array = bm.base.split("?");
				if (segs.length < 2) {
					return -1;
				}
				var temp:String = segs[1];
				segs  = temp.split("#");
				var queryString:String = segs[0];
				trace("query string = " + queryString);
				var params:Object = URLUtil.stringToObject(queryString, "&");
				return(params['groupId']);
			}
			*/	
			
			protected function setupTabs():void {
				var ratiosTab:Object = new Object();
				ratiosTab['name'] = 'ratios';
				ratiosTab['data'] = ratiosData;
				ratiosTab['grid'] = ratiosGrid;
				
				tabs.push(ratiosTab);
				
				var lambdasTab:Object = new Object();
				lambdasTab['name'] = 'lambdas';
				lambdasTab['data'] = lambdasData;
				lambdasTab['grid'] = lambdasGrid;
				
				tabs.push(lambdasTab);
				
				trace("diag0: " + tabs[0]['grid']);
				trace("diag1: " + tabs[1]['grid']);
				trace("lambdasGrid = " + lambdasGrid);
				
			}
			
			protected function getDataForCurrentTab():ArrayCollection {
				return tabs[tabNavigator.selectedIndex]['data'];
			}

			protected function getGridForCurrentTab():DataGrid {
				return tabs[tabNavigator.selectedIndex]['grid'];
			}
			
			protected function getNameForCurrentTab():String {
				return tabs[tabNavigator.selectedIndex]['name'];
			}

			
			
			//todo modify this to work with canonical and locus tag names, no matter what is displayed
			public function receiveGaggleNamelist(species:String, namelist:Array):void {
				gaggleStatus.text = "Receiving Gaggle Broadcast...";
				trace("received Gaggle namelist!");
				/*
				trace("species = " + species);
				trace("names = ");
				for (var i:int = 0; i < namelist.length; i++) {
					trace("\t" + namelist[i]); 
				}
				*/
				
				var match:Boolean = false;
				var indicesToSelect:Array = new Array();
				
				var namesHash:Object = new Object();
				for (var i:int = 0; i < namelist.length; i++) {
					trace("item = " + namelist[i]);
					namesHash[namelist[i]] = 1; 
					trace("value = " + namesHash[namelist[i]]);
				}
				
				for (var j:int = 0; j < getDataForCurrentTab().length ; j++) {
					var name:String = getDataForCurrentTab()[j]['gene'];
					//trace("name = " + name);
					if (namesHash[name] == 1) {
						trace("we have a match");
						if (match == false) {
							clearSelections();
							trace("cleared selections prior to turning on namelist selections, firing event to browser");
							dmvSelectionChanged(null);
							match = true;
						}
						indicesToSelect.push(j);
					}
				}
				
				getGridForCurrentTab().selectedIndices = indicesToSelect;
				//todo - make the same selection in congruent matrix
				trace("# of selected items: " + getGridForCurrentTab().selectedIndices.length);
				
				var timer:Timer = new Timer(500,1);
				timer.addEventListener(TimerEvent.TIMER, function(event:TimerEvent):void {
					gaggleStatus.text = "";
				});
				timer.start();
				numSelectedRowsText.text = "" + getGridForCurrentTab().selectedIndices.length;								
			}
			
			protected function gridClick(event:ListEvent):void {
			}
			
			// todo also fire event if column order is changed
			protected function dmvSelectionChanged(event:ListEvent):void {
				trace("in dmvSelectionChanged, # rows selected is " + getGridForCurrentTab().selectedIndices.length);
				numSelectedRowsText.text =  "" + getGridForCurrentTab().selectedIndices.length;
				var evt:DMVSelectionChangedEvent = new DMVSelectionChangedEvent(DMVSelectionChangedEvent.DMV_SELECTION_CHANGED_EVENT);
				evt.numRowsSelected = getGridForCurrentTab().selectedItems.length;
				evt.numColumns = getGridForCurrentTab().columnCount -1; //todo be aware of disabled columns, also handle it if there are no columns for some reason
				//(otherwise this will return -1)
				evt.species = "Halobacterium sp. NRC-1"; //todo unhardcode
				if (tabNavigator.selectedIndex == 0) {
					evt.matrixType  = "ratios";
				} else if (tabNavigator.selectedIndex == 1) {
					evt.matrixType = "lambdas";
				}
				var namelist:Array = new Array();
				var matrix:Array = new Array();
				var headers:Array = new Array();
				
				for (var h:int = 0; h < getGridForCurrentTab().columnCount; h++) {
					headers.push(getGridForCurrentTab().columns[h].headerText);
				}
				matrix.push(headers);
				
				for (var i:int = 0; i < getGridForCurrentTab().selectedItems.length; i++) {
					var row:Array = new Array();
					namelist.push(getGridForCurrentTab().selectedItems[i]['gene']);
					for (var j:int = 0; j < getGridForCurrentTab().columnCount; j++) {
						var columnField:String = getGridForCurrentTab().columns[j].dataField;
						row.push(getGridForCurrentTab().selectedItems[i][columnField]);
					}
					matrix.push(row);
				}
				evt.selectedNames = namelist;
				evt.matrix = matrix;
				dispatchEvent(evt);
			}
			
			protected function clearSelections():void {
				getGridForCurrentTab().selectedItems = new Array();
				dmvSelectionChanged(null);
			}
			
			
			protected function setDataForCurrentTab(ac:ArrayCollection):void {
				tabs[tabNavigator.selectedIndex]['data'] = ac;
				if (tabNavigator.selectedIndex == 0) {
					ratiosData = ac;
				} else if (tabNavigator.selectedIndex == 1) {
					lambdasData = ac;
				}
				ac = null;
			}
			
			protected function onGotData(event:ResultEvent):void {
				trace("server returned DMV data");
				if (event.result.toString() == null || event.result.toString().length == 0) {
					Alert.show("No data matches your query.");
					return;
				}
				setDataForCurrentTab(new ArrayCollection());
				var tmpAC:ArrayCollection = new ArrayCollection();
				
				var rawObj:Object = JSON.decode(event.result.toString());
				var columns:Array = rawObj['columns'];
				addDataGridColumn('gene','Gene');
				var colHash:Dictionary = new Dictionary();
				for (var c:int = 0; c < columns.length; c++) {
					addDataGridColumn(columns[c],columns[c]);
					colHash[c] = columns[c];
				}
				
				
				 
				var rows:Array = rawObj['rows'];
				
				for (var i:int = 0; i < rows.length; i++) {
					var curRow:Array = rows[i];
					var tableItem:Object = new Object();
					
					for (var j:int = 0; j < curRow.length; j++) {
						var item:Object = curRow[j];
						tableItem['gene'] = item['g'];
						tableItem[colHash[item['c']]] = item['v'];
					}
					tmpAC.addItem(tableItem);
				}
				loadingLabel.text = "";
				setDataForCurrentTab(tmpAC);
				tmpAC = null;
				trace("current tab data size = " + getDataForCurrentTab().length);
			}
			
			
			 private function addDataGridColumn(dataField:String, headerText:String):void {
			 	//var dgc:DataGridColumn = new DataGridColumn(dataField);
			 	var dgc:DataGridToolTipColumn = new DataGridToolTipColumn(dataField);
			 	dgc.headerText = headerText;
			 	dgc.headerToolTip = headerText;
			 	dgc.dataTipField = headerText;
			 	dgc.showDataTips = true;
			 	
                //var dgc:CheckBoxHeaderColumn = new CheckBoxHeaderColumn(dataField);
                //dgc.itemRenderer=  new ClassFactory(CheckBoxItemRenderer);
                //dgc.headerRenderer = new ClassFactory(CheckBoxHeaderRenderer);
                //dgc.headerText = dataField;
                //dgc.dataField = dataField;
                var cols:Array = getGridForCurrentTab().columns;
                cols.push(dgc);
                getGridForCurrentTab().columns = cols;
            }
            
            
            protected function showPlot():void {
            	if (getGridForCurrentTab().selectedItems.length == 0) {
            		Alert.show("No Rows Selected");
            		return;
            	}


            	var geneOrder:Array = new Array();
            	
            	var stuffToPlot:Array = new Array();
            	
            	var conditionHash:Object = new Object();
            	
            	for(var x:int = 0; x < getGridForCurrentTab().selectedItems.length; x++) {
            		var item:Object = getGridForCurrentTab().selectedItems[x];
            		geneOrder.push(item['gene']);
            		for (var s:String in item) {
            			if (s != "gene" && s != "mx_internal_uid") {
            				if (conditionHash[s] == null) {
            					conditionHash[s] = new Array();
            				}
            				var tmp:Array = conditionHash[s] as Array;
            				tmp.push(item[s]);
            				conditionHash[s] = tmp;
            			}
            		}
            	}
            	
				for (var key:String in conditionHash) {
					var row:Object = new Object();
					row['condition'] = key;
					var ary:Array = conditionHash[key] as Array;
					for (var j:int = 0; j < geneOrder.length; j++) {
						row[geneOrder[j]] = ary[j];
					}
					//var json:String = JSON.encode(row);
					//trace("row:\n" + json);
					stuffToPlot.push(row);
				}            	
            	
            	var plotDialog:PlotDialog = PlotDialog(PopUpManager.createPopUp(this, PlotDialog, true));
            	
            	plotDialog.geneOrder = geneOrder;
            	plotDialog.plotData = stuffToPlot;
            	
            	PopUpManager.centerPopUp(plotDialog);
            }
            
            protected function onTabChanged():void {
            	trace("tab changed, new index = " + tabNavigator.selectedIndex);
            	dmvSelectionChanged(null);
            	bm.setTitle("DMV - " + getNameForCurrentTab());
            	numSelectedRowsText.text =  "" + getGridForCurrentTab().selectedIndices.length;
            	
            	if (tabNavigator.selectedIndex == 1 && groupId != null && lambdasData.length == 0) {
            		loadingLabel.text = "Loading data...";
            		var params:Object = getParamsObject(false);
					Util.ajax(params['url'],params, onGotData, Util.ajaxFault);
            	}
            }
            
            

		]]>
	</mx:Script>
	
</mx:Application>
