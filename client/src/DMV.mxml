<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" backgroundColor="white" pageTitle="DMV -- ratios"
	applicationComplete="init()" xmlns:bridge="bridge.*" xmlns:ui="flex.utils.ui.*"  width="1595" height="1372" xmlns:hc="com.hillelcoren.components.*"
	xmlns:isb="org.systemsbiology.echidna.ui.*">
	<bridge:FABridge bridgeName="flex"/>
	<mx:Label x="115" y="797" id="gaggleStatus" width="952" height="18"/>
	<!-- IMPORTANT! Note that creationPolicy for TabNavigator is set to null by default (it's supposed to be set to auto). 
		 So we need to set it to "all" here or we will have issues that will be hard to figure out. -->
	<mx:TabNavigator id="tabNavigator" x="119" y="99" width="948" height="649" change="onTabChanged()" creationPolicy="all">
		<mx:Canvas id="ratiosCanvas" label="ratios" width="100%" height="100%">
			<mx:DataGrid id="ratiosGrid" x="10" y="10" width="917" height="585" dataProvider="{ratiosData}" allowMultipleSelection="true"
				itemClick="gridClick(event)" change="dmvSelectionChanged(event)" headerRelease="dmvSelectionChanged(event)" headerShift="headerShift(event)"
				horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
			</mx:DataGrid>
		</mx:Canvas>
		<mx:Canvas id="lambdasCanvas" label="lambdas" width="100%" height="100%">
			<mx:DataGrid id="lambdasGrid" x="10" y="10" width="917" height="585" dataProvider="{lambdasData}" allowMultipleSelection="true"
				itemClick="gridClick(event)" change="dmvSelectionChanged(event)"  headerRelease="dmvSelectionChanged(event)" headerShift="headerShift(event)"
				horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
			</mx:DataGrid>
		</mx:Canvas>
	</mx:TabNavigator>
	<mx:Label x="115" y="757" text="Number of selected rows:" width="149"/>
	<mx:Text x="272" y="757" width="39" id="numSelectedRowsText" text="0"/>
	<mx:Button x="558" y="755" label="Clear Selections" id="clearSelectionsButton" click="clearSelections()"/>
	<mx:Label x="316" y="757" width="131" id="loadingLabel"/> 
	<mx:Button x="682" y="755" label="Plot" id="plotButton" click="showPlot()"/>
	<mx:Button x="455" y="755" label="Select All" width="95" height="21" id="selectAllButton" click="selectAll()"/>
	<mx:Label x="119" y="36" text="Gene Search:"/>
	<hc:AutoComplete x="207" y="36" id="geneSearchAutoComplete" label="Gene Search" matchType="anyPart" allowMultipleSelection="true"
		dataProvider="{genesAC}" labelField="name">
	</hc:AutoComplete>
	<mx:Button x="375" y="34" label="Select Genes" id="selectGenesButton" click="selectGenes()"/>
	<mx:Button x="485" y="34" label="Clear Search Box" click="clearGeneSearchBox()"/>

	<mx:Button x="739" y="755" label="Toggle Names" id="toggleNamesButton" click="toggleNames()"/>
	<mx:Button x="852" y="755" label="Restore Columns" id="restoreOriginalColumnOrderButton" toolTip="Restore Original Column Order" click="restoreOriginalColumnOrder()"/>

	<isb:PlotStack x="1075" y="142" id="plotStack"></isb:PlotStack>


	<mx:Script>
	
		
		<![CDATA[
			import org.systemsbiology.echidna.events.ClosePlotEvent;
			import org.systemsbiology.echidna.events.ShowPlotEvent;
			import org.systemsbiology.echidna.events.HidePlotEvent;
			import org.systemsbiology.echidna.events.StopProgressBarEvent;
			import org.systemsbiology.echidna.dialog.ProgressBarDialog;
			import mx.events.CollectionEvent;
			import mx.events.IndexChangedEvent;
			import mx.collections.SortField;
			import mx.collections.Sort;
			import org.systemsbiology.echidna.ui.EchidnaAjaxFault;
			import org.hasseg.externalMouseWheel.ExternalMouseWheelSupport;
			import flex.utils.ui.DataGridToolTipColumn;
			import mx.utils.URLUtil;
			import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import flash.utils.getTimer;
			import mx.managers.PopUpManager;
			import org.systemsbiology.echidna.dialog.PlotDialog;
			import mx.controls.Alert;
			import org.systemsbiology.echidna.events.DMVSelectionChangedEvent;
			import mx.events.ListEvent;
			import mx.events.ItemClickEvent;
			import com.adobe.serialization.json.JSON;
			import mx.rpc.events.ResultEvent;
			import org.systemsbiology.echidna.common.Util;
			import org.systemsbiology.echidna.ui.checkboxColumns.CheckBoxItemRenderer;
			import org.systemsbiology.echidna.ui.checkboxColumns.CheckBoxHeaderRenderer;
			import org.systemsbiology.echidna.ui.checkboxColumns.CheckBoxHeaderColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.collections.ArrayCollection;


			[Bindable]
			protected var ratiosData:ArrayCollection = new ArrayCollection();

			[Bindable]
			protected var lambdasData:ArrayCollection = new ArrayCollection();

			[Bindable]
			protected var genesAC:ArrayCollection = new ArrayCollection();


			[Bindable]
			protected var plotListAC:ArrayCollection = new ArrayCollection();

			protected var tabs:Array = new Array();
			
			
			protected var originalColumnOrder:Array = new Array();
			protected var previousColumnOrder:Array = new Array();
			
			private var bm:IBrowserManager;
			
			private var groupId:String;
			private var groupIds:String;
			private var conditionIds:String;
			private var dataProvided:Boolean = false;

			private var ajaxFault:EchidnaAjaxFault;
			
			private var showingVNGNames:Boolean = true;

			private var vngToAliasMap:Object = new Object();
			private var aliasToVngMap:Object = new Object();	
			private var geneList:Object = new Object();		
			
			
			protected var progressDialog:ProgressBarDialog;
			protected var app:DisplayObject;
			
			

			protected function init():void {
				ajaxFault = new EchidnaAjaxFault();
				ajaxFault.addEventListener(StopProgressBarEvent.STOP_PROGRESS_BAR_EVENT, function(event:StopProgressBarEvent):void {
					stopProgressBar();
				});
				app = root;
				var _mwSupport:ExternalMouseWheelSupport = ExternalMouseWheelSupport.getInstance(stage); 
				bm = BrowserManager.getInstance();
				bm.init("","DMV - ratios");
				
				plotStack.addEventListener(ShowPlotEvent.SHOW_PLOT_EVENT, showSavedPlot);
				
				trace("policy: " + tabNavigator.creationPolicy);
				
				geneSearchAutoComplete.setStyle("selectedItemStyleName", AutoComplete.STYLE_FACEBOOK);
				geneSearchAutoComplete.showRemoveIcon = true;

				
				groupId = Util.getQueryStringItem(bm, "groupId");
				conditionIds = Util.getQueryStringItem(bm, "conditionIds");
				groupIds = Util.getQueryStringItem(bm, "groupIds");
				
				trace("group id = " + groupId);
				
				trace("DMV init.");
				setupTabs();
				
				if (groupId != null || conditionIds != null || groupIds != null) {
					dataProvided = true;
				}
				
				if (dataProvided) {
					loadingLabel.text = "Loading data...";
					var params:Object = getParamsObject();
					Util.ajax(params['url'],params, onGotData, ajaxFault.ajaxFault);
					startProgressBar();
				
				} else {
					loadingLabel.text = "No data selected.";
				}
			}
			
			
			private function getParamsObject(ratios:Boolean = true):Object {
				var ret:Object = new Object();
				if (ratios) {
					ret['data_type'] = 'ratio';
				} else {
					ret['data_type'] = 'lambda';
				}
				if (groupId != null) {
					ret['url'] = "main/get_data_for_group";
					ret['group_id'] = groupId;
				}
				
				if (conditionIds != null) {
					ret['url'] = "main/get_data_for_conditions";
					ret['condition_ids'] = conditionIds;
				}
				
				if (groupIds != null) {
					ret['url'] = 'main/get_data_for_groups';
					ret['group_ids'] = groupIds;
				}
				
				return ret;	
			}
			
			/*
			protected function getGroupId():int {
				trace("bm: " + bm);
				trace("bm.base = " + bm.base);
				trace("bm.url = " + bm.url);
				var segs:Array = bm.base.split("?");
				if (segs.length < 2) {
					return -1;
				}
				var temp:String = segs[1];
				segs  = temp.split("#");
				var queryString:String = segs[0];
				trace("query string = " + queryString);
				var params:Object = URLUtil.stringToObject(queryString, "&");
				return(params['groupId']);
			}
			*/	
			
			protected function setupTabs():void {
				var ratiosTab:Object = new Object();
				ratiosTab['name'] = 'ratios';
				ratiosTab['data'] = ratiosData;
				ratiosTab['grid'] = ratiosGrid;
				
				tabs.push(ratiosTab);
				
				var lambdasTab:Object = new Object();
				lambdasTab['name'] = 'lambdas';
				lambdasTab['data'] = lambdasData;
				lambdasTab['grid'] = lambdasGrid;
				
				tabs.push(lambdasTab);
				
				trace("diag0: " + tabs[0]['grid']);
				trace("diag1: " + tabs[1]['grid']);
				trace("lambdasGrid = " + lambdasGrid);
				
			}
			
			protected function getDataForCurrentTab():ArrayCollection {
				return tabs[tabNavigator.selectedIndex]['data'];
			}

			protected function getGridForCurrentTab():DataGrid {
				return tabs[tabNavigator.selectedIndex]['grid'];
			}
			
			protected function getNameForCurrentTab():String {
				return tabs[tabNavigator.selectedIndex]['name'];
			}
			
			protected function getIndexForCurrentTab():int {
				return tabNavigator.selectedIndex;
			}


			protected function getPreviousColumnOrderForCurrentTab():Array {
				return null; //todo implement
			}
			
			protected function getOriginalColumnOrderForCurrentTab():Array {
				return originalColumnOrder[getIndexForCurrentTab()];
			}
			
			
			//todo modify this to work with canonical and locus tag names, no matter what is displayed
			public function receiveGaggleNamelist(species:String, namelist:Array):void {
				gaggleStatus.text = "Receiving Gaggle Broadcast...";
				trace("received Gaggle namelist!");
				/*
				trace("species = " + species);
				trace("names = ");
				for (var i:int = 0; i < namelist.length; i++) {
					trace("\t" + namelist[i]); 
				}
				*/
				
				var match:Boolean = false;
				var indicesToSelect:Array = new Array();
				
				var namesHash:Object = new Object();
				for (var i:int = 0; i < namelist.length; i++) {
					trace("item = " + namelist[i]);
					namesHash[namelist[i]] = 1; 
					trace("value = " + namesHash[namelist[i]]);
				}
				
				for (var j:int = 0; j < getDataForCurrentTab().length ; j++) {
					var name:String = getDataForCurrentTab()[j]['gene'];
					//trace("name = " + name);
					if (namesHash[name] == 1) {
						trace("we have a match");
						if (match == false) {
							//clearSelections();
							//trace("cleared selections prior to turning on namelist selections, firing event to browser");
							//dmvSelectionChanged(null);
							match = true;
						}
						indicesToSelect.push(j);
					}
				}
				
				getGridForCurrentTab().selectedIndices = indicesToSelect;
				//todo - make the same selection in congruent matrix
				trace("# of selected items: " + getGridForCurrentTab().selectedIndices.length);
				
				var timer:Timer = new Timer(500,1);
				timer.addEventListener(TimerEvent.TIMER, function(event:TimerEvent):void {
					gaggleStatus.text = "";
				});
				timer.start();
				numSelectedRowsText.text = "" + getGridForCurrentTab().selectedIndices.length;
				if (match) {
					dmvSelectionChanged(null);						
				}			
			}
			
			protected function gridClick(event:ListEvent):void {
			}
			
			// todo also fire event if column order is changed
			// todo - only fire event if we know we are running firefox(+firegoose)
			protected function dmvSelectionChanged(event:Event):void {
				
				
				for (var z:int = 0; z < getGridForCurrentTab().columnCount; z++) {
					var dgtc:DataGridToolTipColumn = getGridForCurrentTab().columns[z] as DataGridToolTipColumn;
					
					trace("column " + z + " = " + dgtc.headerText);
				}
				
				
				gaggleStatus.text = "";
				trace("in dmvSelectionChanged, # rows selected is " + getGridForCurrentTab().selectedIndices.length);
				numSelectedRowsText.text =  "" + getGridForCurrentTab().selectedIndices.length;
				var evt:DMVSelectionChangedEvent = new DMVSelectionChangedEvent(DMVSelectionChangedEvent.DMV_SELECTION_CHANGED_EVENT);
				evt.numRowsSelected = getGridForCurrentTab().selectedItems.length;
				
				numSelectedRowsText.text = "" + getGridForCurrentTab().selectedItems.length;
				
				evt.numColumns = getGridForCurrentTab().columnCount -1; //todo be aware of disabled columns, also handle it if there are no columns for some reason
				//(otherwise this will return -1)
				evt.species = "Halobacterium sp. NRC-1"; //todo unhardcode
				if (tabNavigator.selectedIndex == 0) {
					evt.matrixType  = "ratios";
				} else if (tabNavigator.selectedIndex == 1) {
					evt.matrixType = "lambdas";
				}
				var namelist:Array = new Array();
				var matrix:Array = new Array();
				var headers:Array = new Array();
				
				for (var h:int = 0; h < getGridForCurrentTab().columnCount; h++) {
					headers.push(getGridForCurrentTab().columns[h].headerText);
				}
				matrix.push(headers);


				
				if (getGridForCurrentTab().selectedItems.length < 200) {
					for (var i:int = 0; i < getGridForCurrentTab().selectedItems.length; i++) {
						var row:Array = new Array();
						namelist.push(getGridForCurrentTab().selectedItems[i]['gene']);
						for (var j:int = 0; j < getGridForCurrentTab().columnCount; j++) {
							var columnField:String = getGridForCurrentTab().columns[j].dataField;
							row.push(getGridForCurrentTab().selectedItems[i][columnField]);
						}
						matrix.push(row);
					}

					//todo - use indirect pointer to matrix - this causes a choke
					evt.selectedNames = namelist;
					evt.matrix = matrix;
					trace("dispatching event to js...")
					dispatchEvent(evt);
				} else {
					gaggleStatus.text = "Too many items selected -- namelist and matrix not set in Firegoose.";
				}

				
				
			}
			
			protected function clearSelections():void {
				getGridForCurrentTab().selectedItems = new Array();
				dmvSelectionChanged(null);
			}
			
			
			protected function setDataForCurrentTab(ac:ArrayCollection):void {
				tabs[tabNavigator.selectedIndex]['data'] = ac;
				if (tabNavigator.selectedIndex == 0) {
					ratiosData = ac;
				} else if (tabNavigator.selectedIndex == 1) {
					lambdasData = ac;
				}
				ac = null;
			}
			
			protected function onGotData(event:ResultEvent):void {
				trace("server returned DMV data");
				
				// do i want to do this?
				geneList = new Object();
				vngToAliasMap = new Object();
				aliasToVngMap = new Object();
				
				
				
				setDataForCurrentTab(new ArrayCollection());
				var tmpAC:ArrayCollection = new ArrayCollection();
				
				var rawObj:Object = JSON.decode(event.result.toString());
				trace("length of rows: " + rawObj['rows'].length);
				trace("length of columns: " + rawObj['columns'].length);
				if (/*rawObj['rows'].length == 0 &&*/ rawObj['columns'].length == 0) {
					Alert.show("No data matches your query.");
					stopProgressBar();
					loadingLabel.text = "";
					return;
				}


				var columns:Array = rawObj['columns'];
				addDataGridColumn('gene','Gene', false);
				var colHash:Dictionary = new Dictionary();
				for (var c:int = 0; c < columns.length; c++) {
					addDataGridColumn(columns[c],columns[c]);
					colHash[c] = columns[c];
				}
				
				
				 
				var rows:Array = rawObj['rows'];
				
				for (var i:int = 0; i < rows.length; i++) {
					var curRow:Array = rows[i];
					var tableItem:Object = new Object();
					
					for (var j:int = 0; j < curRow.length; j++) {
						var item:Object = curRow[j];
						tableItem['gene'] = item['g'];
						tableItem['id'] = item['g']; // immutable id for row
						geneList[item['g']] = 1;
						if (item['a'] != null) {
							geneList[item['a']] = 1;
							tableItem['alias'] = item['a'];
							vngToAliasMap[item['g']] = item['a'];
							aliasToVngMap[item['a']] = item['g'];
						} else {
							vngToAliasMap[item['g']] = item['g'];
							aliasToVngMap[item['g']] = item['g'];
						}
						tableItem[colHash[item['c']]] = item['v'];
					}
					tmpAC.addItem(tableItem);
				}
				loadingLabel.text = "";
				setDataForCurrentTab(tmpAC);
				
				
				var colOrder:Array = new Array();
				for (var x:int = 0; x < getGridForCurrentTab().columnCount; x++) {
					var dgtc:DataGridToolTipColumn = getGridForCurrentTab().columns[x] as DataGridToolTipColumn;
					colOrder.push(dgtc);
				}

				originalColumnOrder[getIndexForCurrentTab()] = colOrder;
				previousColumnOrder[getIndexForCurrentTab()] = colOrder;

				
				tmpAC = null;
				
				tmpAC = new ArrayCollection();
				for (var z:String in geneList) {
					var o:Object = new Object();
					o['name']  = z;
					tmpAC.addItem(o);
				}
				var sortField:SortField = new SortField();
				sortField.name = "name";
				sortField.numeric = false;
				var sort:Sort = new Sort();
				sort.fields = [sortField];
				tmpAC.sort = sort;
				tmpAC.refresh();
				
				genesAC = tmpAC;
				tmpAC = null;
				
				stopProgressBar();
				trace("current tab data size = " + getDataForCurrentTab().length);
			}
			
			
			 private function addDataGridColumn(dataField:String, headerText:String, draggable:Boolean = true):void {
			 	//var dgc:DataGridColumn = new DataGridColumn(dataField);
			 	var dgc:DataGridToolTipColumn = new DataGridToolTipColumn(dataField);
			 	dgc.headerText = headerText;
			 	dgc.headerToolTip = headerText;
			 	dgc.dataTipField = headerText;
			 	dgc.showDataTips = true;
			 	dgc.draggable = draggable;
			 	
			 	
                //var dgc:CheckBoxHeaderColumn = new CheckBoxHeaderColumn(dataField);
                //dgc.itemRenderer=  new ClassFactory(CheckBoxItemRenderer);
                //dgc.headerRenderer = new ClassFactory(CheckBoxHeaderRenderer);
                //dgc.headerText = dataField;
                //dgc.dataField = dataField;
                var cols:Array = getGridForCurrentTab().columns;
                cols.push(dgc);
                getGridForCurrentTab().columns = cols;
            }
            
            protected function showPlot():void {
            	if (getGridForCurrentTab().selectedItems.length == 0) {
            		Alert.show("No Rows Selected");
            		return;
            	}


            	var geneOrder:Array = new Array();
            	
            	var stuffToPlot:Array = new Array();
            	
            	var conditionHash:Object = new Object();
            	
            	for(var x:int = 0; x < getGridForCurrentTab().selectedItems.length; x++) {
            		var item:Object = getGridForCurrentTab().selectedItems[x];
            		geneOrder.push(item['gene']);
            		for (var s:String in item) {
            			if (s != "gene" && s != "mx_internal_uid") {
            				if (conditionHash[s] == null) {
            					conditionHash[s] = new Array();
            				}
            				var tmp:Array = conditionHash[s] as Array;
            				tmp.push(item[s]);
            				conditionHash[s] = tmp;
            			}
            		}
            	}
            	
            	
            	for (var i:int = 1; i < getGridForCurrentTab().columnCount; i++) {
            		var dgtc:DataGridToolTipColumn = getGridForCurrentTab().columns[i] as DataGridToolTipColumn;
            		var key:String = dgtc.headerText;
            		trace("key = " + key);
					var row:Object = new Object();
					row['condition'] = key;
					var ary:Array = conditionHash[key] as Array;
					for (var j:int = 0; j < geneOrder.length; j++) {
						row[geneOrder[j]] = ary[j];
					}
					//var json:String = JSON.encode(row);
					//trace("row:\n" + json);
					stuffToPlot.push(row);
            	}
            	
            	
            	var plotDialog:PlotDialog = PlotDialog(PopUpManager.createPopUp(this, PlotDialog, false));
            	
            	plotDialog.uniqueID = "" + new Date();
            	
            	plotDialog.geneOrder = geneOrder;
            	plotDialog.plotData = stuffToPlot;
            	
            	PopUpManager.centerPopUp(plotDialog);
            	
            	plotDialog.addEventListener(HidePlotEvent.HIDE_PLOT_EVENT, hidePlot);
            	plotDialog.addEventListener(ClosePlotEvent.CLOSE_PLOT_EVENT, closePlot)
            	
            }
            
            protected function hidePlot(event:HidePlotEvent):void {
            	
            	var plot:PlotDialog = event.plot;
				
				plotStack.addItem(plot);
            }
            
            protected function closePlot(event:ClosePlotEvent):void {
            	plotStack.removeItem(event.plot);
            }
            
            protected function showSavedPlot(event:ShowPlotEvent):void {
            	trace("show saved plot");
            	event.plot.setPosition(plotStack.getPlotPosition(event.plot));
            	PopUpManager.addPopUp(event.plot, app);
            }
            
            
            protected function onTabChanged():void {
            	trace("tab changed, new index = " + tabNavigator.selectedIndex);
            	dmvSelectionChanged(null);
            	bm.setTitle("DMV - " + getNameForCurrentTab());
            	numSelectedRowsText.text =  "" + getGridForCurrentTab().selectedIndices.length;
            	
            	if (tabNavigator.selectedIndex == 1 && dataProvided && lambdasData.length == 0) {
            		startProgressBar();
            		loadingLabel.text = "Loading data...";
            		var params:Object = getParamsObject(false);
					Util.ajax(params['url'],params, onGotData, ajaxFault.ajaxFault);
            	}
            }
            
            protected function selectAll():void {
            	//todo - make this select all in both tabs?
            	var a:Array = new Array();
            	for (var i:int = 0; i < getDataForCurrentTab().length; i++) {
            		a[i] = i;
            	}
            	getGridForCurrentTab().selectedIndices = a;
            	dmvSelectionChanged(null);
            }	
            
            protected function toggleNames():void {
            	showingVNGNames = !showingVNGNames;
            	trace("toggling names...showing vng names? " + showingVNGNames); 
        		// change to aliases
        		for (var i:int = 0; i < getDataForCurrentTab().length; i++) {
        			//dante
        			if (showingVNGNames) {
        				getDataForCurrentTab()[i]['gene'] = aliasToVngMap[getDataForCurrentTab()[i]['gene']];
        			} else {
	        			getDataForCurrentTab()[i]['gene'] = vngToAliasMap[getDataForCurrentTab()[i]['id']];
        			}
        			//trace("gene = " + getDataForCurrentTab()[i]['gene']);
        		}
        		getGridForCurrentTab().invalidateList();
            }
            
			protected function selectGenes():void {
				
				var autoCompleteContents:Array = Util.getAutoCompleteContentsArray(geneSearchAutoComplete);
								
				if (autoCompleteContents.length == 0) {
					Alert.show("Nothing to search for!");
					return;
				}
				
				var searchHash:Object = new Object();
				for (var i:int = 0; i < autoCompleteContents.length; i++) {
					searchHash[autoCompleteContents[i]] = 1;
				}
				var indicesToSelect:Array = new Array();
				for (i = 0; i < getDataForCurrentTab().length; i++) {
					var gene:String = getDataForCurrentTab()[i]['gene'];
					var alias:String = getDataForCurrentTab()[i]['alias'];
					if (searchHash[gene] != null) {
						indicesToSelect.push(i);
					}
					if (alias != null && searchHash[alias] != null) {
						indicesToSelect.push(i);
					}
				}
				if (indicesToSelect.length == 0) {
					Alert.show("No match for your search, selection unchanged.");
					return;
				}	
				getGridForCurrentTab().selectedIndices = indicesToSelect;
				dmvSelectionChanged(null);
			}        
			
			
			
			protected function headerShift(event:IndexChangedEvent):void {
				//trace("old index = " + event.oldIndex + ", new index = " + event.newIndex);
				if ( event.newIndex == 0) {
					trace("you are trying to do a bad thing!");
					
					var tmp:Array = new Array();
					
					var geneColumn:int;
					for (var v:int= 0; v < getGridForCurrentTab().columnCount; v++) {
						
						if (v > 1) {
							//trace("adding " + d.headerText + " to temp array, v = " + v);
							var d:DataGridToolTipColumn = getGridForCurrentTab().columns[v] as DataGridToolTipColumn;
							tmp.push(d);
						}
						
						if (d.headerText == "Gene") {
							geneColumn = v;
						}
						//trace("after shift, column at position " + v + " is " + d.headerText);
					}
					
					//trace("geneColumn = " + geneColumn);
					
					var newcols:Array = new Array();
					newcols.push(getGridForCurrentTab().columns[geneColumn] as DataGridToolTipColumn);
					newcols[event.oldIndex] = getGridForCurrentTab().columns[0] as DataGridToolTipColumn;				
					for (var i:int = 1; i < getGridForCurrentTab().columnCount; i++) {
						//trace("i = " + i);
						if (newcols[i] == undefined) {
							var dgtc:DataGridToolTipColumn = tmp.shift();
							//trace("assigning " + dgtc.headerText + " to slot " + i);
							newcols[i] = dgtc;
						}
					}
					getGridForCurrentTab().columns = newcols;
					getGridForCurrentTab().invalidateList();
					
					
				} else {
					dmvSelectionChanged(event);
				}
			}


			protected function restoreOriginalColumnOrder():void {
				
				if (compareColumnArrays(getGridForCurrentTab().columns, originalColumnOrder[getIndexForCurrentTab()])) {
					trace("column order has not changed");
				} else {
					trace("restoring original column order");
					getGridForCurrentTab().columns = originalColumnOrder[getIndexForCurrentTab()];
					getGridForCurrentTab().invalidateList();
					dmvSelectionChanged(null);
				}
				
			}
			
			
			protected function compareColumnArrays(arr1:Array,arr2:Array):Boolean {
				if (arr1.length != arr2.length) return false; // shouldn't happen, but....
				for (var i:int = 0; i < arr1.length; i++) {
					var d1:DataGridToolTipColumn = arr1[i];
					var d2:DataGridToolTipColumn = arr2[i];
					//trace("i = " + i + ", d1 = " + d1.headerText + ", d2 = " + d2.headerText);
					if (d1.headerText != d2.headerText) return false;
				}
				return true;
			}	
			
			
			protected function startProgressBar():void {
				progressDialog = ProgressBarDialog(PopUpManager.createPopUp(app, ProgressBarDialog, true));
				PopUpManager.centerPopUp(progressDialog);
			}
			
			protected function stopProgressBar():void {
				PopUpManager.removePopUp(progressDialog);
			}
			
			protected function clearGeneSearchBox():void {
				geneSearchAutoComplete.selectedItems = new ArrayCollection();
				geneSearchAutoComplete.text = ""; 
				geneSearchAutoComplete.label = "";
				geneSearchAutoComplete.searchText = "";
				geneSearchAutoComplete.invalidateDisplayList();
				geneSearchAutoComplete.setFocus();
			}				

		]]>
	</mx:Script>
	
	
</mx:Application>
