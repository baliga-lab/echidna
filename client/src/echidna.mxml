<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" color="#000000" backgroundColor="#FFFFFF" pageTitle="Echidna" xmlns:local="*"
	xmlns:ui="flex.utils.ui.*" 	xmlns:hc="com.hillelcoren.components.*"
	xmlns:classes="com.hillelcoren.components.autoComplete.classes.*"

	applicationComplete="init()" height="100%" width="100%" creationComplete="creationComplete()">
	
	<mx:states>
		<mx:State name="groupState" id="groupState">
			<mx:AddChild relativeTo="{hbox1}" position="lastChild">
				<mx:Button label="Relate" id="relateButton" toolTip="Relate two groups" enabled="false" click="relateTwoGroups()"/>
			</mx:AddChild>
			<mx:RemoveChild target="{button1}"/>
			<mx:AddChild relativeTo="{relateButton}" position="before" target="{button1}"/>
		</mx:State>
	</mx:states>
	
	<mx:XMLList id="resultCategories">
        <category>
            <name>All</name>
            <shortname>all</shortname>
        </category>
        <category>
            <name>Ungrouped</name>
            <shortname>ungrouped</shortname>
        </category>
        <category>
            <name>Grouped</name>
            <shortname>grouped</shortname>
        </category>
        <category>
            <name>Shared By others</name>
            <shortname>sharedbyothers</shortname>
        </category>
    </mx:XMLList>
	
	<mx:Panel x="5" y="0" width="100%" height="100%" layout="absolute" borderStyle="solid">

		<mx:Text x="10" y="0" text="Echidna" width="61" height="21"/>

		<mx:MenuBar x="79" y="-1" width="273" 
			labelField="@label" itemClick="menuClick(event)" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #FFFFFF]"
			borderColor="#FFFFFF" id="menuBar">
			
		</mx:MenuBar>
		
		<hc:AutoComplete id="autoComplete" y="-1" x="352" width="200" label="Search" dataProvider="{autoCompletionItemsAC}" 
			matchType="anyPart" labelField="name" allowMultipleSelection="true">
			
		</hc:AutoComplete>

		<mx:Text id="emailAddressTextBox" x="604" y="0" text="Not logged in" width="318" height="21" visible="true"/>



		<mx:Canvas x="10" y="29" width="191" height="100%" id="groupingCanvas">



			<mx:Accordion id="accordion" width="100%" height="100%" enabled="true" click="accordionClick(event)">
				<mx:Canvas label="Results" width="100%" height="100%" enabled="true" click="accordionClick(event)">
					<mx:DataGrid id="resultsChoicesGrid" dataProvider="{resultCategories}" width="100%" showHeaders="false" itemClick="setResultsShown(event)">
						<mx:columns>
							<mx:DataGridColumn dataField="name"/> 
						</mx:columns>													
					</mx:DataGrid>
				</mx:Canvas>
				<mx:Canvas label="Groupings" width="100%" height="100%">
				</mx:Canvas>
				<mx:Canvas label="Tags" width="100%" height="100%" enabled="false">
				</mx:Canvas>
			</mx:Accordion>
		</mx:Canvas>
		


			
		
			<mx:ViewStack x="209" y="19" height="100%" width="100%" id="viewStack">
			<!-- whichever child is *first* will show up in design mode  after the reload button is hit -->
				
			<mx:Canvas id="groupView">
				<mx:VBox>
					<mx:HDividedBox x="0" y="0" width="725" height="100%">
						<mx:DataGrid width="50%" id="groupsGrid" height="567" dataProvider="{groupsAC}"  itemClick="groupClick(event)"
							allowMultipleSelection="true">
							<mx:columns>
								<mx:DataGridColumn headerText="Name" dataField="name"/>
								<mx:DataGridColumn headerText="# Results" dataField="num_results"/>
							</mx:columns>
						</mx:DataGrid>
						<mx:VDividedBox height="100%" width="295" horizontalScrollPolicy="off" verticalScrollPolicy="off">
							<mx:HBox id="hbox1">
								<mx:Button id="removeConditionsButton" label="Remove" click="removeSelectedConditions()" enabled="false"/>
								<mx:Button id="dmvButton" label="DMV" enabled="false" toolTip="View selected group in Data Matrix Viewer (DMV)" click="launchDmv()"/>
								<mx:Button label="..." enabled="false" id="button1"/>
							</mx:HBox>
							<mx:VBox id="vbox1">
							    <mx:Label text="Drag conditions to change order."/>							
								<mx:DataGrid height="337" id="smallConditionGrid" dataProvider="{smallConditionsAC}" 
									dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" dragStart="smallConditionsGridStatus.text=''"
									itemRollOver="createSCGTooltip(event)" itemRollOut="deleteSCGTooltip(event)"
									dragComplete="conditionDropped(event)"  itemClick="smallConditionGridClicked(event)" 
									change="smallConditionGridChangeListener()"
									allowMultipleSelection="true">
									<mx:columns>
										<mx:DataGridColumn headerText="Name" dataField="name" />
										<mx:DataGridColumn headerText="ID" dataField="description"/>
									</mx:columns>
								</mx:DataGrid>
								<mx:Label id="smallConditionsGridStatus"></mx:Label>
							</mx:VBox>
							<mx:Canvas width="296" height="177" horizontalScrollPolicy="off" verticalScrollPolicy="off">
								<mx:VBox width="237" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
									<mx:HBox horizontalScrollPolicy="off" verticalScrollPolicy="off">
										
										<mx:Label text="Related Groups:"/>
										<mx:Button id="deleteRelationshipButton" label="Delete" toolTip="Remove this relationship" enabled="false" click="deleteRelationship()"/>
										<mx:Button id="goToGroupButton" label="Go To" enabled="false" click="goToGroup()"/>
									</mx:HBox>
										<mx:DataGrid id="relatedGroupsGrid" dataProvider="{relatedGroupsAC}" click="onRelatedGroupsGridClick()" horizontalScrollPolicy="off" verticalScrollPolicy="off">
											<mx:columns>
												<mx:DataGridColumn headerText="Name" dataField="name" showDataTips="true" dataTipField="name"/>
												<mx:DataGridColumn headerText="Relationship" dataField="relationship" showDataTips="true" dataTipField="relationship"/>
											</mx:columns>
										</mx:DataGrid>
								</mx:VBox>
							</mx:Canvas>
						</mx:VDividedBox>
					</mx:HDividedBox>
					<mx:HBox>
						<mx:Label text="Groups shown:"></mx:Label>
						<mx:Text text="{groupsAC.length}"></mx:Text>
						<mx:Label text="Selected Rows"/>
						<mx:Text text="{groupsGrid.selectedItems.length}"/>
					</mx:HBox>
				</mx:VBox>
				
			</mx:Canvas>

				

				<mx:Canvas id="resultsView" height="100%" width="100%">
					<mx:VBox>
					<mx:VDividedBox>
						<mx:HDividedBox width="100%" height="80%">
							<mx:Canvas width="547" height="439" borderStyle="solid">
								<mx:DataGrid x="10" y="10" id="conditionGrid"  width="535" height="427" dataProvider="{conditionsAC}"
									allowMultipleSelection="true" itemClick="conditionGridItemClick(event)">
									<mx:columns>
										<ui:DataGridToolTipColumn headerText="#"
										 headerToolTip="Number of groups this condition appears in"  dataField="num_groups" width="20"/>
										<mx:DataGridColumn headerText="Name" dataField="name" dataTipField="name" showDataTips="true" width="200"/>
										<ui:DataGridToolTipColumn headerText="SBEAMS ID" headerToolTip="SBEAMS ID" dataField="sbeams_project_id"/>
										<ui:DataGridToolTipColumn headerText="Forward Slide ID" headerToolTip="Forward Slide ID" dataField="forward_slide_number"/>
										<ui:DataGridToolTipColumn headerText="Reverse Slide ID" headerToolTip="Reverse Slide ID" dataField="reverse_slide_number"/>
										<mx:DataGridColumn headerText="Owner" dataField="col5"/>
										<mx:DataGridColumn headerText="Access" dataField="col6"/>
									</mx:columns>
								</mx:DataGrid>
							</mx:Canvas>
			
								<mx:VDividedBox x="10" y="10" height="455" id="coams" width="116">
									<mx:Canvas width="100%" height="239" borderStyle="solid" id="t">
										<mx:Text x="10" y="10" text="Grouped In:"/>
										<mx:DataGrid x="10" y="36" width="94" id="groupedInGrid" dataProvider="{groupedInAC}">
											<mx:columns>
												<mx:DataGridColumn headerText="ID" dataField="id"/>
												<mx:DataGridColumn dataTipField="name"  showDataTips="true" headerText="Name" dataField="name"/>
											</mx:columns>
										</mx:DataGrid>
									</mx:Canvas>
									<mx:Canvas width="100%" height="171" borderStyle="solid" id="b">



												<local:TagCloud id="LocalTagCloudIResultsView" 
													MaxFontSize="16" MinFontSize="8" 
													width="100%" height="80%"  
													XmlFileSource="test/XmlTest.xml" TagFieldName="author"  
													BackgroundColor="0xFFFFFF" BackgroundAlpha="1" ></local:TagCloud>
			
									</mx:Canvas>
								</mx:VDividedBox>
						</mx:HDividedBox>
						<mx:Canvas width="676" height="133" borderStyle="solid">
							<mx:Text x="10" y="10" text="Description of condition:&#xd;" width="412"/>
							<mx:Text x="34" y="25" width="461" height="86" id="descriptionText"/>
						</mx:Canvas>
						
					</mx:VDividedBox>
					<mx:HBox>
						<mx:Label text="Conditions shown:"></mx:Label>
						<mx:Text text="{conditionsAC.length}"></mx:Text>
						<mx:Label text="Selected Rows"/>
						<mx:Text text="{conditionGrid.selectedItems.length}"/>
					</mx:HBox>
				</mx:VBox>

				</mx:Canvas>						

				

				

			</mx:ViewStack>
		
		
		
	</mx:Panel>
	
	<mx:XMLList id="menuItems_resultsView">
		<menuItem label="File">
			<menuItem label="Edit Profile" enabled="false"/>
			<menuItem label="Log Out" enabled="false"/>
		</menuItem>
		<menuItem label="Edit"/>
		<menuItem label="Groups">
			<menuItem label="Add Selected Items to New Group..." eventName="group.addToNew"/>
	        <menuItem label="Add Selected Items To Existing Group..." eventName="group.addToExisting"/>
    	    <menuItem label="Go To Groups View" eventName="group.goToGroupsView"/>
		</menuItem>
		<menuItem label="Visualization">
			<menuItem label="DMV" enabled="false"/>
		</menuItem>
    </mx:XMLList>
    
	<mx:XMLList id="menuItems_groupsView">
		<menuItem label="File">
			<menuItem label="Edit Profile" enabled="false"/>
			<menuItem label="Log Out" enabled="false"/>
		</menuItem>
		<menuItem label="Edit"/>
		<menuItem label="Groups">
			<menuItem label="Rename Selected Group..." eventName="group.renameSelectedGroup"/>
			<menuItem label="Delete Selected Group..." eventName="group.deleteSelectedGroup"/>
    	    <menuItem label="Go To Results View" eventName="group.goToResultsView"/>
		</menuItem>
		<menuItem label="Visualization">
			<menuItem label="DMV" enabled="false"/>
		</menuItem>
    </mx:XMLList>



	
	<mx:Script>
		<![CDATA[
			import org.hasseg.externalMouseWheel.ExternalMouseWheelSupport;
			import org.systemsbiology.echidna.events.RenamedGroupEvent;
			import org.systemsbiology.echidna.dialog.RenameGroupDialog;
			import org.systemsbiology.echidna.events.CreatedRelationshipEvent;
			import mx.utils.URLUtil;
			import mx.managers.IBrowserManager;
			import mx.managers.BrowserManager;
			import org.systemsbiology.echidna.dialog.CreateRelationshipDialog;
			import mx.events.StateChangeEvent;
			import mx.states.State;
			import org.systemsbiology.echidna.events.GotExistingGroupIdEvent;
			import org.systemsbiology.echidna.dialog.AddToExistingGroupDialog;
			import flash.utils.setInterval;
			import mx.events.DragEvent;
			import mx.controls.dataGridClasses.DataGridItemRenderer;
			import mx.events.ListEvent;
			import org.systemsbiology.echidna.events.GotNewGroupNameEvent;
			import org.systemsbiology.echidna.dialog.NewGroupDialog;
			import mx.events.MenuEvent;
			import mx.collections.ArrayCollection;
			import mx.events.ChildExistenceChangedEvent;
			import mx.events.CloseEvent;
			import org.systemsbiology.echidna.events.GotLoginInfoEvent;
			import mx.containers.TitleWindow;
			import org.systemsbiology.echidna.dialog.LoginDialog;
			import mx.managers.PopUpManager;
			import mx.controls.Alert;
			import mx.rpc.http.HTTPService;
			import org.systemsbiology.echidna.common.Util;

		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		
		import com.adobe.serialization.json.JSON;
		
		
		protected var app:DisplayObject;;
		
		protected var loggedInUser:String;
		protected var conditionData:Object;
		[Bindable]
		protected var conditionsAC:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		protected var groupsAC:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		protected var smallConditionsAC:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		protected var groupedInAC:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		protected var relatedGroupsAC:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		protected var autoCompletionItemsAC:ArrayCollection = new ArrayCollection();
		
		private var newGroupName:String;
		
		protected var bm:IBrowserManager;
		
			
		public function init():void {
			//currentState = '';
			var _mwSupport:ExternalMouseWheelSupport = ExternalMouseWheelSupport.getInstance(stage);
			app = root;
			bm = BrowserManager.getInstance();
			bm.init('', "Echidna");
			setCurrentState('');
			trace("app init, current state is " + currentState);
			resultsChoicesGrid.selectedItem = resultCategories[0];
			accordion.selectedIndex = 0;
			addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, function(event:StateChangeEvent):void {
				trace('state changed to: ' + event.newState);
				trace("currentState is: " + currentState);
				if (event.newState == 'groupState') {
					switchToGroupsView();
				} else if (event.newState == '') {
					switchToResultsView();
				}
				
				
			});
			
			
			switchToResultsView();
			Util.ajax('main/get_logged_in_user', null, populateEmailAddress, Util.ajaxFault);
			
			Util.ajax("main/get_auto_completion_items", null, function(event:ResultEvent):void {
				var ary:Array = JSON.decode(event.result.toString());
				var tmp:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < ary.length; i++) {
					var obj:Object = new Object();
					obj['name'] = ary[i];
					tmp.addItem(obj);
				}
				autoCompletionItemsAC = tmp;
			}, Util.ajaxFault);
			
		}
		
		public function creationComplete():void {
			trace("in creationComplete");
			//currentState = '';
		}
		

		protected function smallConditionGridClicked(event:ListEvent):void {
			/*
			trace("listing of items in small CG:");
			for (var i:int = 0; i < smallConditionsAC.length; i++) {
				trace("\t" + smallConditionsAC.getItemAt(i)['id']);
			}
			*/	
		}
		
		protected function smallConditionGridDragComplete(event:DragEvent):void {
			/*
			trace("in drag complete!");
			for (var i:int = 0; i < smallConditionsAC.length; i++) {
				trace("\t" + smallConditionsAC.getItemAt(i)['id']);
			}	
			*/
		}
		
		
		protected function setResultsShown(event:ListEvent):void {
			trace("in setResultsShown()");
			if (resultsChoicesGrid.selectedItems.length == 0) {
				Alert.show("You must choose some category of conditions");
				return;			
			}
			if (resultsChoicesGrid.selectedItem.shortname == 'sharedbyothers') {
				Alert.show("This is not supported yet");
				return;
			}
			Util.ajax("main/get_filtered_conditions", {"result_type" : resultsChoicesGrid.selectedItem.shortname}, gotConditions, Util.ajaxFault);
		}
		
		protected function conditionGridItemClick(event:ListEvent):void {
			if (conditionGrid.selectedItems.length > 1) {
				descriptionText.text = '';
				groupedInAC = new ArrayCollection();
				return;
			}
			
			Util.ajax('main/get_condition_detail',{"condition_id": conditionGrid.selectedItem['id']},
			function(event:ResultEvent):void {
				var obj:Object = JSON.decode(event.result.toString());
				var keys:Array = new Array();
				for (var k:String in obj) {
					keys.push(k);
				}
				keys.sort();
				descriptionText.text = 'Condition Name:  ' + conditionGrid.selectedItem['name'] + "\n";
				for (var i:int = 0; i < keys.length; i++) {
					descriptionText.text += "\t" +
					keys[i] +
					": " +
					obj[keys[i]] + 
					"\n";
			    }
				
			}, Util.ajaxFault);
			
			if (conditionGrid.selectedItem['num_groups'] == 0) {
				return;
			} else {
				Util.ajax('main/get_groups_for_condition',{"condition_id": conditionGrid.selectedItem['id']},
				function(event:ResultEvent):void {
					groupedInAC =  Util.objectToArrayCollection(JSON.decode(event.result.toString()), 'condition_group');
				}, Util.ajaxFault);
			}
		}
		
		protected function accordionClick(event:MouseEvent):void {
			groupedInAC = new ArrayCollection();
			trace("accordion clicked, current state is " + currentState);
			if (accordion.selectedIndex == 0) { // Results/conditions
				if (currentState == '' || currentState == null) { // condition state
				} else {
					trace("changing state, i think");
					currentState = '';
				}
			} else if (accordion.selectedIndex == 1) { //groupings
				if (currentState == '' || currentState == null) { //Results/conditions
					trace("changing state, i think(2)");
					if (groupsAC.length == 0) {
						populateGroupGrid(null);
					}
					currentState = 'groupState';
				} else {
					
				}
			} else if (accordion.selectedIndex == 2) { // tags
				Alert.show("Not supported yet.");
				return;
			}
		}
		
		protected function relateTwoGroups():void {
			var dispObj:DisplayObject = root;
			var thisApp:echidna = this;
			Util.ajax('main/get_relationship_types',null,function(event:ResultEvent):void{
				var obj:Object = JSON.decode(event.result.toString());
				var relAC:ArrayCollection = Util.objectToArrayCollection(obj,'relationship_type');
				var other:Object = new Object();
				other = {"name": "Other", "inverse": "Other"};
				relAC.addItem(other);
				var createRelationshipDialog:CreateRelationshipDialog = CreateRelationshipDialog(PopUpManager.createPopUp(thisApp, CreateRelationshipDialog, true));
				PopUpManager.centerPopUp(createRelationshipDialog);
				createRelationshipDialog.relationshipAC = relAC;
				createRelationshipDialog.setInverse(relAC.getItemAt(0)['inverse']);
				createRelationshipDialog.condition1 = groupsGrid.selectedItems[0]['name'];
				createRelationshipDialog.condition1Id = groupsGrid.selectedItems[0]['id'];
				createRelationshipDialog.condition2 = groupsGrid.selectedItems[1]['name'];
				createRelationshipDialog.condition2Id = groupsGrid.selectedItems[1]['id'];
			}, Util.ajaxFault);
		}
		
		public function menuClick(event:MenuEvent):void {
			trace("menu item clicked: " + event.label + ", index = " + event.index);
			
			
			
			if (event.item.@eventName == "group.addToNew") {
				if (conditionGrid.selectedItems.length == 0) {
					Alert.show("You must select some conditions.");
					return;
				}
				var addGroupDialog:NewGroupDialog = NewGroupDialog(PopUpManager.createPopUp(this, NewGroupDialog, true));
				addGroupDialog.addEventListener(GotNewGroupNameEvent.GOT_NEW_GROUP_NAME_EVENT, userChoseNewGroupName);
				PopUpManager.centerPopUp(addGroupDialog);
			} else if (event.item.@eventName == "group.goToGroupsView") {
				//switchToGroupsView();
				currentState = 'groupState';
				populateGroupGrid(null);
			} else if (event.item.@eventName == "group.goToResultsView") {
				//switchToResultsView();
				getConditions();
				currentState = '';
		    } else if (event.item.@eventName == "group.renameSelectedGroup") {
		    	 if (groupsGrid.selectedIndices.length != 1) {
		    	 	Alert.show("Select one item to rename.");
		    	 	return;
		    	 }
		    	 var renameGroupDialog:RenameGroupDialog = RenameGroupDialog(PopUpManager.createPopUp(this, RenameGroupDialog, true));
   	 			 renameGroupDialog.addEventListener(RenamedGroupEvent.RENAMED_GROUP_EVENT, function(event:RenamedGroupEvent):void {
					 trace("got renamed group event!");
					 var selectedId:int = groupsGrid.selectedItem['id'];
					 populateGroupGrid("" + selectedId);
				 });

		    	 renameGroupDialog.groupName = groupsGrid.selectedItem['name'];
		    	 renameGroupDialog.groupId = groupsGrid.selectedItem['id'];
		    	 PopUpManager.centerPopUp(renameGroupDialog);
		    } else if (event.item.@eventName == "group.deleteSelectedGroup") {
		    	 if (groupsGrid.selectedIndices.length != 1) {
		    	 	Alert.show("Select one item to delete.");
		    	 	return;
		    	 }
		    	 Alert.show("Are you sure?", "Confirm Delete", Alert.YES|Alert.NO,this,function(event:CloseEvent):void{
		    	 	if (event.detail === Alert.YES) {
			    	 	Util.ajax("main/delete_group", {"group_id": groupsGrid.selectedItem['id']},function(event:ResultEvent):void{
			    	 		populateGroupGrid(null);
			    	 	},Util.ajaxFault);
		    	 	}
		    	 },null,Alert.NO);
		    	
			} else if (event.item.@eventName == "group.addToExisting") {
				//todo - handle it if there are no groups!
				if (conditionGrid.selectedItems.length == 0) {
					Alert.show("You must select some conditions.");
					return;
				}
				var groupListAC:ArrayCollection = new ArrayCollection();
				var addToExistingDialog:AddToExistingGroupDialog = AddToExistingGroupDialog(PopUpManager.createPopUp(this, AddToExistingGroupDialog, true));
				Util.ajax('main/get_all_groups',null,function(event:ResultEvent):void{
					var obj:Object = JSON.decode(event.result.toString());
					for (var i:Object in obj) {
						var item:Object = new Object();
						item['data'] = obj[i]['condition_group']['id'];
						item['label']= obj[i]['condition_group']['name']
						groupListAC.addItem(item);
					}
					addToExistingDialog.setData(groupListAC);
				},Util.ajaxFault);
				PopUpManager.centerPopUp(addToExistingDialog);
				addToExistingDialog.addEventListener(GotExistingGroupIdEvent.GOT_EXISTING_GROUP_ID_EVENT, function(event:GotExistingGroupIdEvent):void {
					trace("got back this group id: " + event.groupId);
					var ids:Array = new Array();
					for (var i:int = 0; i < conditionGrid.selectedItems.length; i++) {
						ids.push(conditionGrid.selectedItems[i]['id']);
					}
					
					Util.ajax('main/add_conditions_to_existing_group',{"group_id": event.groupId, "ids" : JSON.encode(ids)},
						function(ajaxEvent:ResultEvent):void{
							trace('back from add_conditions_to_existing_group');
							if (ajaxEvent.result.toString() == "warning") {
								Alert.show("One or more of these conditions were already in that group. Duplicate assignments ignored.","Warning");
							}
							//show groups view
							//set selection
							populateGroupGrid("" + event.groupId);
							//switchToGroupsView();
							currentState = 'groupState';
						}, Util.ajaxFault);
				});
				
			}
		}
		
		
		protected function removeSelectedConditions():void {
			Alert.show("Are you sure?", "Confirm Delete", Alert.YES|Alert.NO,this,function(event:CloseEvent):void{
				if (event.detail == Alert.YES) {
					var itemsToRemove:Object = new Object();
					var idsToRemove:Array = new Array();
					for (var i:int = 0; i < smallConditionGrid.selectedItems.length; i++) {
						itemsToRemove[smallConditionGrid.selectedItems[i]['name']] = 1;
						idsToRemove.push(smallConditionGrid.selectedItems[i]['id']);
					}
					
					Util.ajax('main/remove_conditions_from_group', 
						{'group_id': groupsGrid.selectedItem['id'],
						'ids_to_remove': JSON.encode(idsToRemove)},
						function(event:ResultEvent):void{
						}, Util.ajaxFault);
					
					for (var s:String in itemsToRemove) {
						removeConditionFromSmallGrid(s);
					}
				}
			},null,Alert.NO);
			
			
			
		}
		
		
		private function removeConditionFromSmallGrid(conditionName:String):void {
			for (var i:int = 0; i < smallConditionsAC.length; i++) {
				if (smallConditionsAC.getItemAt(i).name == conditionName) {
					smallConditionsAC.removeItemAt(i);
					return;
				}
			}
		}
		
		protected function switchToGroupsView():void {
			viewStack.selectedChild = groupView;
			menuBar.dataProvider = menuItems_groupsView;
			accordion.selectedIndex=1;
			
			//rowCountText.text = "{groupsAC.size}";
			//rowsSelectedText.text = "{groupsGrid.selectedItems.length}";
		}
		
		protected function switchToResultsView(): void {
			viewStack.selectedChild = resultsView;
			menuBar.dataProvider = menuItems_resultsView;
			accordion.selectedIndex=0;
			//rowCountText.text = "{conditionsAC.size}";
			//rowsSelectedText.text = "{conditionGrid.selectedItems.length}";
		}
		
		protected function groupClick(event:ListEvent):void {
			trace("in groupClick()");
			removeConditionsButton.enabled = false;
			if (groupsGrid.selectedIndices.length == 1) {
				onGroupRowSelected(event.rowIndex);
				dmvButton.enabled = true;
				relateButton.enabled = false;
			} else if (groupsGrid.selectedIndices.length == 2) {
				relateButton.enabled = true;
				dmvButton.enabled = false;
			} else {
				relateButton.enabled = false;
				dmvButton.enabled = false;
			}
			/*
			removeConditionsButton.enabled = false;
			onGroupRowSelected(event.rowIndex);
			*/
		}
		
		protected function createSCGTooltip(event:ListEvent):void {
			//todo make this specific to columns
			var str:String = DataGridItemRenderer(event.itemRenderer).data.name;
			smallConditionGrid.toolTip = str;
		}
		
		protected function deleteSCGTooltip(event:ListEvent):void {
			smallConditionGrid.toolTip = null;
		}
		
		protected function createCGToolTip(event:ListEvent):void {
			trace("row index = " + event.rowIndex);
			var str:String = DataGridItemRenderer(event.itemRenderer).data.name;
			trace("name = " + str);
			conditionGrid.toolTip = str;
		}
		
		protected function deleteCGToolTip(event:ListEvent):void {
			conditionGrid.toolTip = null;
		} 
		
		protected function userChoseNewGroupName(event:GotNewGroupNameEvent):void {
			newGroupName = event.groupName;
			Util.ajax('main/check_if_group_exists',{'group_name': newGroupName},checkForExistingGroupName,Util.ajaxFault);
		}
		
		protected function checkForExistingGroupName(event:ResultEvent):void {
			if (event.result.toString() == 'true') {
				var alertResult:Alert = Alert.show("There is already a group called '" + newGroupName + "'. Do you wish to create another one?","Duplicate Name Alert",
					Alert.YES|Alert.NO,null,function(event:CloseEvent):void{
						if (event.detail == Alert.YES) {
							createNewGroup();
						} else {
							return;
						}					
					});
					return;
			}
			createNewGroup();
		}
		
		protected function updateRelatedGroupsGrid():void {
			Util.ajax("main/get_related_groups", {"group_id": groupsGrid.selectedItem['id']},function(event:ResultEvent):void{
				var results:Object = JSON.decode(event.result.toString());
				relatedGroupsAC = Util.objectToArrayCollection(results, "relationship");
			}, Util.ajaxFault);
		}
		
		protected function conditionDropped(event:DragEvent):void {
			trace("in conditionDropped");
			var ids:Array = new Array();
			for (var i:int = 0; i < smallConditionsAC.length; i++) {
				ids.push(smallConditionsAC.getItemAt(i)['id']);
			}
			
			Util.ajax('main/reorder_group',{"group_id" : groupsGrid.selectedItem['id'], "ids" : JSON.encode(ids)},function(event:ResultEvent):void{
				smallConditionsGridStatus.text = "Changed sort order";
			},Util.ajaxFault); 
		}
		
		protected function createNewGroup():void {
			var ids:Array = new Array();
			for (var i:int = 0; i < conditionGrid.selectedItems.length; i++) {
				ids.push(conditionGrid.selectedItems[i]['id']);	
			}
			var json:String = JSON.encode(ids);
			Util.ajax('main/create_new_group',{"name" : newGroupName, "ids" : json},function(event:ResultEvent):void {
				var newGroupId:String = event.result.toString();
				//switchToGroupsView();
				currentState = 'groupState';
				populateGroupGrid(newGroupId);
			},Util.ajaxFault);
		}
		
		protected function populateGroupGrid(initialRow:String):void {
				Util.ajax('main/get_all_groups', null, function(event:ResultEvent):void {
					var groupsObj:Object = JSON.decode(event.result.toString());
					groupsAC = Util.objectToArrayCollection(groupsObj,"condition_group");
					if (initialRow == null) {
						return;
					} else {
						var data:Object = groupsGrid.dataProvider;
						for(var i:int = 0; i < groupsAC.length; i++) {
							if (groupsAC.getItemAt(i)['id'] == initialRow) {
								groupsGrid.selectedIndex = i;
								groupsGrid.validateNow();
								groupsGrid.scrollToIndex(i);
								onGroupRowSelected(i);
								break;
							}
						}
				  	}
				  	currentState = 'groupState';
			},Util.ajaxFault);
		}
		
		
		protected function debugSCG():void {
			for (var i:int = 0; i <  smallConditionsAC.length; i++) {
				trace("" + i + ": " + smallConditionsAC.getItemAt(i)['id']);
			}
			trace();			
		}
		
		protected function onGroupRowSelected(rowIndex:int):void {
			trace("# of selected items: " + groupsGrid.selectedItems.length);
			relatedGroupsAC = new ArrayCollection();
			deleteRelationshipButton.enabled = false;
			goToGroupButton.enabled = false;
			if (groupsGrid.selectedItems.length == 2) {
				relateButton.enabled = true;
			} else {
				relateButton.enabled = false;
			}
			
			if (groupsGrid.selectedItems.length == 1) {
				updateRelatedGroupsGrid();
				dmvButton.enabled = true;
				Util.ajax('main/get_conditions_for_group',{"group_id" : groupsGrid.selectedItem['id']},function(event:ResultEvent):void{
					var obj:Object = JSON.decode(event.result.toString());
					
					smallConditionsAC = Util.objectToArrayCollection(obj,'condition');
				}, Util.ajaxFault);
			} else {
				dmvButton.enabled = false;
				smallConditionsAC = new ArrayCollection();
			}
			

		}
		
		public function gotEmailAddressFromUser(event:GotLoginInfoEvent):void {
			loggedInUser = event.email;
			
			/*
			var loginService:mx.rpc.http.HTTPService = new mx.rpc.http.HTTPService();
			loginService.url = "main/login";
			loginService.send({email: loggedInUser});
			loginService.resultFormat = "text";
			*/
			Util.ajax('main/login', {"email": loggedInUser}, loggedIn, Util.ajaxFault); 
			emailAddressTextBox.text = loggedInUser;
		}
		
		public function loggedIn(event:ResultEvent):void {
			getConditions();
		}

		public function getConditions():void {
			Util.ajax('main/get_all_conditions',null,gotConditions,Util.ajaxFault);
		}
				
		public function gotConditions(event:ResultEvent):void {
			conditionData = JSON.decode(event.result.toString());
			conditionsAC = Util.objectToArrayCollection(conditionData, 'condition');
		}
		
		
		public function populateEmailAddress(event:ResultEvent):void {
			var email:String = event.result as String;
			if (email == 'not logged in' || email == '') {
				var loginDialog:LoginDialog;
				loginDialog = LoginDialog(PopUpManager.createPopUp(this, LoginDialog, true));
				loginDialog.addEventListener(GotLoginInfoEvent.GOT_LOGIN_INFO_EVENT, gotEmailAddressFromUser);
				loginDialog.title = 'Login';
				PopUpManager.centerPopUp(loginDialog);
			} else {
				emailAddressTextBox.text = email;
				getConditions();
			}
			
		}
		
		
		protected function smallConditionGridChangeListener():void {
			var exp:Boolean = (smallConditionGrid.selectedItems.length > 0);
			trace("set Remove button enabled to: " + exp);
			removeConditionsButton.enabled=exp;
		}
		
		protected function launchDmv():void {
			var originalUrl:String = bm.url;
			var url:String = URLUtil.getFullURL(originalUrl, "/DMV.html"); // this could break on some configs (non-virtualname)
			url += "?groupId=" + groupsGrid.selectedItem['id'];
			url += "&groupName=" + groupsGrid.selectedItem['name'];
			newWin(url); 			
		}
		
		private function newWin(url:String):void {
		    var urlRequest:URLRequest = new URLRequest(url);
		    navigateToURL(urlRequest, "_blank");
		}
		
		protected function onRelatedGroupsGridClick():void {
			if (relatedGroupsGrid.selectedIndices.length == 0) {
				deleteRelationshipButton.enabled = false;
				goToGroupButton.enabled = false;
			} else {
				deleteRelationshipButton.enabled = true;
				goToGroupButton.enabled = true;
			}
		}
		
		protected function deleteRelationship():void {
			
			Alert.show("Are you sure?", "Confirm Delete", Alert.YES|Alert.NO,this,function(event:CloseEvent):void{
				if (event.detail == Alert.YES) {
					var relationshipId:int = relatedGroupsGrid.selectedItem['relationship_id'];
					var groupId:int = relatedGroupsGrid.selectedItem['id'];
					Util.ajax("main/delete_relationship",{"relationship_id": relationshipId, "group_id": groupId}, 
					function(event:ResultEvent):void {
						var results:Object = JSON.decode(event.result.toString());
						relatedGroupsAC = Util.objectToArrayCollection(results, "relationship");
					}, Util.ajaxFault);			
				}
			}, null, Alert.NO);
			
		}
		
		
		protected function goToGroup():void {
			var groupId:int = relatedGroupsGrid.selectedItem['id'];
			for (var i:int = 0; i < groupsAC.length; i++ ) {
				if (groupsAC[i]['id'] == groupId) {
					groupsGrid.selectedItem = groupsAC[i];
					onGroupRowSelected(i);
					break;
				}
			}
		}
		
		]]>
	</mx:Script>
	
</mx:Application>
