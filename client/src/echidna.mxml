<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" color="#000000" backgroundColor="#FFFFFF" pageTitle="Echidna" xmlns:local="*"
	applicationComplete="init()">
	
	
	<mx:Panel x="5" y="0" width="952" height="672" layout="absolute" borderStyle="solid">

		<mx:Text x="10" y="0" text="Echidna" width="61" height="21"/>

		<mx:MenuBar x="79" y="-1" width="273" dataProvider="{groupMenuItems}"
			labelField="@label" itemClick="groupMenuClick(event)" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #FFFFFF]"
			borderColor="#FFFFFF">
			
		</mx:MenuBar>

		<mx:Text id="emailAddressTextBox" x="594" y="1" text="Not logged in" width="318"/>



		<mx:Canvas x="10" y="29" width="191" height="583">



			<mx:Accordion  width="100%" height="100%" enabled="false">
				<mx:Canvas label="Results" width="100%" height="100%" enabled="false">
					<mx:Accordion  width="80%" height="100%">
						<mx:Canvas label="All" width="100%" height="100%" enabled="true">
						</mx:Canvas>
						<mx:Canvas label="Ungrouped" width="100%" height="100%">
						</mx:Canvas>
						<mx:Canvas label="Grouped" width="100%" height="100%">
						</mx:Canvas>
						<mx:Canvas label="Shared By Others" width="100%" height="100%">
						</mx:Canvas>

					</mx:Accordion>
				</mx:Canvas>
				<mx:Canvas label="Groupings" width="100%" height="100%">
				</mx:Canvas>
				<mx:Canvas label="Tags" width="100%" height="100%">
				</mx:Canvas>
			</mx:Accordion>
		</mx:Canvas>
		


			
		
			<mx:ViewStack x="209" y="19" height="593" width="703" id="viewStack">
			<!-- whichever child is *first* will show up in design mode  after the reload button is hit -->
				
			<mx:Canvas id="groupView">
				<mx:HDividedBox x="0" y="0" width="703" height="593">
					<mx:DataGrid width="50%" id="groupsGrid" height="591" dataProvider="{groupsAC}" itemClick="groupClick(event)">
						<mx:columns>
							<mx:DataGridColumn headerText="Name" dataField="name"/>
							<mx:DataGridColumn headerText="# Results" dataField="num_results"/>
						</mx:columns>
					</mx:DataGrid>
					<mx:VDividedBox height="100%" width="295">
						<mx:HBox>
							<mx:Button label="Remove" enabled="false"/>
							<mx:Button label="..." enabled="false"/>
						</mx:HBox>
						<mx:DataGrid height="337" id="smallConditionGrid">
							<mx:columns>
								<mx:DataGridColumn headerText="Name" dataField="name"/>
								<mx:DataGridColumn headerText="ID" dataField="description"/>
							</mx:columns>
						</mx:DataGrid>
						<mx:Canvas width="296" height="177">
											<local:TagCloud id="LocalTagCloudInGroupView" 
												MaxFontSize="16" MinFontSize="8" 
												width="100%" height="80%"  
												XmlFileSource="test/XmlTest.xml" TagFieldName="author"  
												BackgroundColor="0xFFFFFF" BackgroundAlpha="1" ></local:TagCloud>
						</mx:Canvas>
					</mx:VDividedBox>
				</mx:HDividedBox>
			</mx:Canvas>

				

				<mx:Canvas id="resultsView">
					
					<mx:VDividedBox>
						<mx:HDividedBox width="100%" height="80%">
							<mx:Canvas width="547" height="439" borderStyle="solid">
								<mx:DataGrid x="10" y="10" id="conditionGrid"  width="535" height="427" dataProvider="{conditionsAC}"
									allowMultipleSelection="true">
									<mx:columns>
										<mx:DataGridColumn headerText="Name" dataField="name" width="200"/>
										<mx:DataGridColumn headerText="SBEAMS ID" dataField="col2"/>
										<mx:DataGridColumn headerText="Forward Slide ID" dataField="forward_slide_number"/>
										<mx:DataGridColumn headerText="Reverse Slide ID" dataField="reverse_slide_number"/>
										<mx:DataGridColumn headerText="Owner" dataField="col5"/>
										<mx:DataGridColumn headerText="Access" dataField="col6"/>
									</mx:columns>
								</mx:DataGrid>
							</mx:Canvas>
			
								<mx:VDividedBox x="10" y="10" height="455" id="coams" width="116">
									<mx:Canvas width="100%" height="239" borderStyle="solid" id="t">
										<mx:Text x="10" y="10" text="Grouped In:"/>
										<mx:DataGrid x="10" y="36" width="94">
											<mx:columns>
												<mx:DataGridColumn headerText="ID" dataField="col1"/>
												<mx:DataGridColumn headerText="Name" dataField="col2"/>
											</mx:columns>
										</mx:DataGrid>
									</mx:Canvas>
									<mx:Canvas width="100%" height="171" borderStyle="solid" id="b">
										<mx:Text x="10" y="10" text="Tags:"/>
											<local:TagCloud id="LocalTagCloud" 
												MaxFontSize="16" MinFontSize="8" 
												width="100%" height="80%"  
												XmlFileSource="test/XmlTest.xml" TagFieldName="author"  
												BackgroundColor="0xFFFFFF" BackgroundAlpha="1" ></local:TagCloud>
			
									</mx:Canvas>
								</mx:VDividedBox>
						</mx:HDividedBox>
						<mx:Canvas width="676" height="133" borderStyle="solid">
							<mx:Text x="47" y="22" text="Description of condition" width="412"/>
						</mx:Canvas>
						
					</mx:VDividedBox>

				</mx:Canvas>						

				

				

			</mx:ViewStack>
		
		
		
	</mx:Panel>
	
	<mx:XMLList id="groupMenuItems">
		<menuItem label="File">
			<menuItem label="Edit Profile"/>
			<menuItem label="Log Out"/>
		</menuItem>
		<menuItem label="Edit"/>
		<menuItem label="Groups">
			<menuItem label="Add Selected Items to New Group..." eventName="group.addToNew"/>
	        <menuItem label="Add Selected Items To Existing Group..."/>
    	    <menuItem label="Go To Groups View" eventName="group.goToGroupsView"/>
		</menuItem>
		<menuItem label="Visualization">
			<menuItem label="DMV"/>
		</menuItem>
    </mx:XMLList>
	
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			import org.systemsbiology.echidna.events.GotNewGroupNameEvent;
			import org.systemsbiology.echidna.dialog.NewGroupDialog;
			import mx.events.MenuEvent;
			import mx.collections.ArrayCollection;
			import mx.events.ChildExistenceChangedEvent;
			import mx.events.CloseEvent;
			import org.systemsbiology.echidna.events.GotLoginInfoEvent;
			import mx.containers.TitleWindow;
			import org.systemsbiology.echidna.dialog.LoginDialog;
			import mx.managers.PopUpManager;
			import mx.controls.Alert;
			import mx.rpc.http.HTTPService;

		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		
		import com.adobe.serialization.json.JSON;
		
		
		protected var loggedInUser:String;
		protected var conditionData:Object;
		[Bindable]
		protected var conditionsAC:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		protected var groupsAC:ArrayCollection = new ArrayCollection();
		
		private var newGroupName:String;
		/*
		to disable menu items do something like this:
		cbMainMenu.dataprovider.source[0].menuitem[1].submenuitem[1].@enabled = false;
		from
		http://molaro.wordpress.com/2008/08/07/flex-programmatically-disableenable-items-in-a-menubar-component/
		 */
			
		public function init():void {
			trace("in init function");
			viewStack.selectedChild = resultsView;
			
			ajax('main/get_logged_in_user', null, populateEmailAddress, ajaxFault);
		}
		
		
		public function groupMenuClick(event:MenuEvent):void {
			trace("group menu item clicked: " + event.label + ", index = " + event.index);
			
			
			
			if (event.item.@eventName == "group.addToNew") {
				if (conditionGrid.selectedItems.length == 0) {
					Alert.show("You must select some conditions.");
					return;
				}
				var addGroupDialog:NewGroupDialog = NewGroupDialog(PopUpManager.createPopUp(this, NewGroupDialog, true));
				addGroupDialog.addEventListener(GotNewGroupNameEvent.GOT_NEW_GROUP_NAME_EVENT, userChoseNewGroupName);
				PopUpManager.centerPopUp(addGroupDialog);
			} else if (event.item.@eventName == "group.goToGroupsView") {
				viewStack.selectedChild = groupView;
				populateGroupGrid(null);
			}
		}
		
		protected function groupClick(event:ListEvent):void {
			onGroupRowSelected(event.rowIndex);
		}
		
		protected function userChoseNewGroupName(event:GotNewGroupNameEvent):void {
			newGroupName = event.groupName;
			ajax('main/check_if_group_exists',{'group_name': newGroupName},checkForExistingGroupName,ajaxFault);
		}
		
		protected function checkForExistingGroupName(event:ResultEvent):void {
			if (event.result.toString() == 'true') {
				var alertResult:Alert = Alert.show("There is already a group called '" + newGroupName + "'. Do you wish to create another one?","Duplicate Name Alert",
					Alert.YES|Alert.NO,null,function(event:CloseEvent):void{
						if (event.detail == Alert.YES) {
							createNewGroup();
						} else {
							return;
						}					
					});
					return;
			}
			createNewGroup();
		}
		
		protected function createNewGroup():void {
			var ids:Array = new Array();
			for (var i:int = 0; i < conditionGrid.selectedItems.length; i++) {
				ids.push(conditionGrid.selectedItems[i]['id']);	
			}
			var json:String = JSON.encode(ids);
			trace("selected items: " + json);
			ajax('main/create_new_group',{"name" : newGroupName, "ids" : json},function(event:ResultEvent):void {
				var newGroupId:String = event.result.toString();
				viewStack.selectedChild = groupView;
				populateGroupGrid(newGroupId);
			},ajaxFault);
		}
		
		protected function populateGroupGrid(initialRow:String):void {
				ajax('main/get_all_groups', null, function(event:ResultEvent):void {
					var groupsObj:Object = JSON.decode(event.result.toString());
					groupsAC = objectToArrayCollection(groupsObj,"condition_group");
					//todo set selected item
					if (initialRow == null) {
						return;
					} else {
						var data:Object = groupsGrid.dataProvider;
						for(var i:int = 0; i < groupsAC.length; i++) {
							if (groupsAC.getItemAt(i)['id'] == initialRow) {
								groupsGrid.selectedIndex = i;
								groupsGrid.validateNow();
								groupsGrid.scrollToIndex(i);
								onGroupRowSelected(i);
								break;
							}
						}
				  	}
			},ajaxFault);
		}
		
		protected function onGroupRowSelected(rowIndex:int):void {
			trace("i think that this row has been clicked: " + rowIndex);
		}
		
		public function gotEmailAddressFromUser(event:GotLoginInfoEvent):void {
			loggedInUser = event.email;
			var loginService:mx.rpc.http.HTTPService = new mx.rpc.http.HTTPService();
			loginService.url = "main/login";
			loginService.send({email: loggedInUser});
			loginService.resultFormat = "text";
			ajax('main/login', {"email": loggedInUser}, loggedIn, ajaxFault); 
			emailAddressTextBox.text = loggedInUser;
		}
		
		public function loggedIn(event:ResultEvent):void {
			trace("logged in");
			getConditions();
		}

		public function getConditions():void {
			ajax('main/get_all_conditions',null,gotConditions,ajaxFault);
		}
				
		public function gotConditions(event:ResultEvent):void {
			conditionData = JSON.decode(event.result.toString());
			conditionsAC = objectToArrayCollection(conditionData, 'condition');
		}
		
		public function objectToArrayCollection(obj:Object, type:String):ArrayCollection {
			var ac:ArrayCollection = new ArrayCollection();
			for (var i:Object in obj) {
				var item:Object = obj[i][type];
				ac.addItem(item);
			}
			return ac;
		}
		
		public function populateEmailAddress(event:ResultEvent):void {
			var email:String = event.result as String;
			trace("in populateEmailAddress, result is " + email);
			if (email == 'not logged in') {
				var loginDialog:LoginDialog;
				loginDialog = LoginDialog(PopUpManager.createPopUp(this, LoginDialog, true));
				loginDialog.addEventListener(GotLoginInfoEvent.GOT_LOGIN_INFO_EVENT, gotEmailAddressFromUser);
				loginDialog.title = 'Login';
				PopUpManager.centerPopUp(loginDialog);
				trace("dialog has been popped up");
			} else {
				emailAddressTextBox.text = email;
				getConditions();
			}
			
		}
		
		public function ajaxFault(event:FaultEvent):void {
			Alert.show("Server error!");
		}
		
		
		public function ajax(url:String, params:Object, result:Function, fault:Function): void {
			var service:HTTPService = new HTTPService();
			service.url = url;
			service.resultFormat = "text";
			service.addEventListener(ResultEvent.RESULT, result);
			service.addEventListener(FaultEvent.FAULT, fault);
			service.send(params);
		}
		
		
		]]>
	</mx:Script>
	
</mx:Application>
