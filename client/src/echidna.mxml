<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" color="#000000" backgroundColor="#FFFFFF" pageTitle="Echidna" xmlns:local="*"
	applicationComplete="init()">
	<mx:Panel x="5" y="10" width="952" height="662" layout="absolute" borderStyle="solid">
		<mx:Text x="10" y="0" text="Echidna" width="135" height="21"/>
		<mx:Canvas x="10" y="29" width="191" height="583">
			<mx:Accordion  width="100%" height="100%">
				<mx:Canvas label="Results" width="100%" height="100%">
					<mx:Accordion  width="80%" height="100%">
						<mx:Canvas label="All" width="100%" height="100%">
						</mx:Canvas>
						<mx:Canvas label="Ungrouped" width="100%" height="100%">
						</mx:Canvas>
						<mx:Canvas label="Grouped" width="100%" height="100%">
						</mx:Canvas>
						<mx:Canvas label="Shared By Others" width="100%" height="100%">
						</mx:Canvas>

					</mx:Accordion>
				</mx:Canvas>
				<mx:Canvas label="Groupings" width="100%" height="100%">
				</mx:Canvas>
				<mx:Canvas label="Tags" width="100%" height="100%">
				</mx:Canvas>
			</mx:Accordion>
		</mx:Canvas>
		<mx:VDividedBox x="209" y="19" height="593" width="703">
			<mx:HDividedBox width="100%" height="80%">
				<mx:Canvas width="547" height="467" borderStyle="solid">
					<mx:Button x="20" y="10" label="Import"/>
					<mx:Button x="95" y="10" label="Edit"/>
					<mx:DataGrid x="10" y="57" id="adg1"  width="535" height="380" dataProvider="{conditionsAC}">
						<mx:columns>
							<mx:DataGridColumn headerText="Name" dataField="name" width="200"/>
							<mx:DataGridColumn headerText="SBEAMS ID" dataField="col2"/>
							<mx:DataGridColumn headerText="Forward Slide ID" dataField="forward_slide_number"/>
							<mx:DataGridColumn headerText="Reverse Slide ID" dataField="reverse_slide_number"/>
							<mx:DataGridColumn headerText="Owner" dataField="col5"/>
							<mx:DataGridColumn headerText="Access" dataField="col6"/>
						</mx:columns>
					</mx:DataGrid>
					<mx:Button x="151" y="10" label="Group..."/>
					<mx:Button x="231" y="10" label="DMV"/>
					<mx:TextInput x="309" y="10" text="search" enabled="true" editable="false"/>
				</mx:Canvas>

					<mx:VDividedBox x="10" y="10" height="455" id="coams" width="116">
						<mx:Canvas width="100%" height="70%" borderStyle="solid" id="t">
							<mx:Text x="10" y="10" text="Grouped In:"/>
							<mx:DataGrid x="10" y="36" width="94">
								<mx:columns>
									<mx:DataGridColumn headerText="ID" dataField="col1"/>
									<mx:DataGridColumn headerText="Name" dataField="col2"/>
								</mx:columns>
							</mx:DataGrid>
						</mx:Canvas>
						<mx:Canvas width="100%" height="171" borderStyle="solid" id="b">
							<mx:Text x="10" y="10" text="Tags:"/>
								<local:TagCloud id="LocalTagCloud" 
									MaxFontSize="16" MinFontSize="8" 
									width="100%" height="80%"  
									XmlFileSource="test/XmlTest.xml" TagFieldName="author"  
									BackgroundColor="0xFFFFFF" BackgroundAlpha="1" ></local:TagCloud>

						</mx:Canvas>
					</mx:VDividedBox>
			</mx:HDividedBox>
			<mx:Canvas width="100%" height="20%" borderStyle="solid">
				<mx:Text x="47" y="22" text="Description of condition" width="412"/>
			</mx:Canvas>
			
		</mx:VDividedBox>
		<mx:Text id="emailAddressTextBox" x="383" y="0" text="Not logged in" width="318"/>
		<mx:Text x="709" y="0" text="Edit Profile" width="98"/>
		<mx:Text x="815" y="0" text="Logout" width="79"/>
		
	</mx:Panel>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.ChildExistenceChangedEvent;
			import mx.events.CloseEvent;
			import org.systemsbiology.echidna.events.GotLoginInfoEvent;
			import mx.containers.TitleWindow;
			import org.systemsbiology.echidna.dialog.LoginDialog;
			import mx.managers.PopUpManager;
			import mx.controls.Alert;
			import mx.rpc.http.HTTPService;

		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		
		import com.adobe.serialization.json.JSON;
		
		
		protected var loggedInUser:String;
		protected var conditionData:Object;
		[Bindable]
		protected var conditionsAC:ArrayCollection = new ArrayCollection();
		
			
		public function init():void {
			trace("in init function");
			ajax('main/get_logged_in_user', null, populateEmailAddress, ajaxFault);
		}
		
		public function gotEmailAddressFromUser(event:GotLoginInfoEvent):void {
			loggedInUser = event.email;
			var loginService:mx.rpc.http.HTTPService = new mx.rpc.http.HTTPService();
			loginService.url = "main/login";
			loginService.send({email: loggedInUser});
			loginService.resultFormat = "text";
			ajax('main/login', {"email": loggedInUser}, loggedIn, ajaxFault); 
			emailAddressTextBox.text = loggedInUser;
		}
		
		public function loggedIn(event:ResultEvent):void {
			trace("logged in");
			getConditions();
		}

		public function getConditions():void {
			ajax('main/get_all_conditions',null,gotConditions,ajaxFault);
		}
				
		public function gotConditions(event:ResultEvent):void {
			conditionData = JSON.decode(event.result.toString());
			conditionsAC = objectToArrayCollection(conditionData, 'condition');
		}
		
		public function objectToArrayCollection(obj:Object, type:String):ArrayCollection {
			var ac:ArrayCollection = new ArrayCollection();
			for (var i:Object in obj) {
				var item:Object = obj[i][type];
				ac.addItem(item);
			}
			return ac;
		}
		
		public function populateEmailAddress(event:ResultEvent):void {
			var email:String = event.result as String;
			trace("in populateEmailAddress, result is " + email);
			if (email == 'not logged in') {
				var loginDialog:LoginDialog;
				loginDialog = LoginDialog(PopUpManager.createPopUp(this, LoginDialog, true));
				loginDialog.addEventListener(GotLoginInfoEvent.GOT_LOGIN_INFO_EVENT, gotEmailAddressFromUser);
				loginDialog.title = 'Login';
				PopUpManager.centerPopUp(loginDialog);
				trace("dialog has been popped up");
			} else {
				emailAddressTextBox.text = email;
				getConditions();
			}
			
		}
		
		public function ajaxFault(event:FaultEvent):void {
			Alert.show("Server error!");
		}
		
		
		public function ajax(url:String, params:Object, result:Function, fault:Function): void {
			var service:HTTPService = new HTTPService();
			service.url = url;
			service.resultFormat = "text";
			service.addEventListener(ResultEvent.RESULT, result);
			service.addEventListener(FaultEvent.FAULT, fault);
			service.send(params);
		}
		
		
		]]>
	</mx:Script>
	
</mx:Application>
