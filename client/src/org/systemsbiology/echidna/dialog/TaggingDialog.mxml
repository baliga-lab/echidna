<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"  layout="absolute" width="810" height="500" title="Tagging"
	creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import mx.core.IFlexDisplayObject;
			import org.systemsbiology.echidna.events.TagNamedEvent;
			import mx.controls.dataGridClasses.DataGridItemRenderer;
			import mx.events.ListEvent;
			import com.adobe.serialization.json.JSON;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			import org.systemsbiology.echidna.events.StopProgressBarEvent;
			import org.systemsbiology.echidna.common.Util;
			import mx.managers.PopUpManager;
			import org.systemsbiology.echidna.ui.EchidnaAjaxFault;
			import mx.collections.ArrayCollection;
		
			[Bindable]
			public var groupsAC:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var conditionsAC:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var tagsAC:ArrayCollection = new ArrayCollection();
			
			protected var ajaxFault:EchidnaAjaxFault = new EchidnaAjaxFault();
			
			protected var groupToConditionMap:Object = new Object();
			protected var groupToNumConditionsMap:Object = new Object();
			
			protected var userId:String;
			protected var tagName:String;
			
			
		
			protected function init():void {
				trace("in tagging dialog init");
				ajaxFault.addEventListener(StopProgressBarEvent.STOP_PROGRESS_BAR_EVENT, function(event:StopProgressBarEvent):void {
				});
				Util.ajax("main/get_distinct_tags", null, function(event:ResultEvent):void {
					var obj:Object = JSON.decode(event.result.toString());
					tagsAC = Util.objectToArrayCollection(obj,"tag");
					
				}, ajaxFault.ajaxFault);
				
				
				Util.ajax("main/get_user_id", null, function(event:ResultEvent):void {
					userId = event.result.toString();
				}, ajaxFault.ajaxFault);
				
				var params:Object = new Object();
				var ids:Array = new Array();
				for (var i:int = 0; i < groupsAC.length; i++) {
					ids.push(groupsAC.getItemAt(i)['id']);
				}
				
				Util.ajax("main/get_conditions_for_groups", {"group_ids" : ids.join(",")}, function(event:ResultEvent):void {
					var obj:Object = JSON.decode(event.result.toString());
					var ac:ArrayCollection = Util.objectToArrayCollection(obj, "condition");
					for(var i:int = 0; i < ac.length; i++) {
						var name:String = ac.getItemAt(i)['name'];
						var id:int = ac.getItemAt(i)['condition_group_id'];
						var condId:int = ac.getItemAt(i)['condition_id'];
						if (groupToConditionMap[id] == null) {
							groupToConditionMap[id] = new ArrayCollection();
						}
						var mapAC:ArrayCollection = groupToConditionMap[id];
						var item:Object = new Object();
						item['name'] = name;
						item['id'] = condId;
						mapAC.addItem(item);
						groupToConditionMap[id] = mapAC;
						
					}
					
					for(var key:Object in groupToConditionMap) {
						var theAC:ArrayCollection = groupToConditionMap[key];
						groupToNumConditionsMap[key] = theAC.length;
					}
				}, ajaxFault.ajaxFault);
				
			}
			
			protected function getGroupIndexById(id:int):int {
				for (var i:int = 0; i < groupsAC.length; i++) {
					if (groupsAC.getItemAt(i)['id'] == id) {
						return i;
					}	
				}
				return -1;
			}
			
			
			protected function groupClick():void {
				if (groupGrid.selectedItems.length > 1) {
					conditionsAC = new ArrayCollection();
					return;
				}
				
				var id:int = groupGrid.selectedItem['id'];
				conditionsAC = groupToConditionMap[id];
				trace("original # of conditions for this group: " + groupToNumConditionsMap[id]);	
				
			}
			
			protected function removeGroups():void {
				if (groupGrid.selectedItems.length > 0) {
					conditionsAC = new ArrayCollection();
				}
				groupsAC = removeFromArrayCollection(groupsAC, groupGrid.selectedItems);
				
			}
			
			protected function removeConditions():void {
				var id:int = groupGrid.selectedItem['id'];
				var ac:ArrayCollection = groupToConditionMap[id];
				
				
				ac = removeFromArrayCollection(ac, conditionGrid.selectedItems);
				groupToConditionMap[id] = ac;
				conditionsAC = ac;
			}
			
			
			protected function removeFromArrayCollection(ac:ArrayCollection, itemsToRemove:Array):ArrayCollection {
				var ret:ArrayCollection = new ArrayCollection();
				
				for(var i:int = 0; i < ac.length; i++) {
					var name:String = ac.getItemAt(i)['name'];
					var found:Boolean = false;
					for (var j:int = 0; j < itemsToRemove.length; j++) {
						if (name == itemsToRemove[j]['name']) {
							found = true;
						}
					}
					if (!found) {
						ret.addItem(ac.getItemAt(i));
					}
				}
				return ret;
			}
			
			
			
			protected function saveTag():void {
				var condIds:Array = new Array();
				for (var i:int = 0; i < groupsAC.length; i++) {
					var id:int = groupsAC.getItemAt(i)['id'];
					var conds:ArrayCollection = groupToConditionMap[id];
					for (var j:int = 0; j < conds.length; j++) {
						condIds.push(conds.getItemAt(j)['id']);
					}
				}	
				trace("congrats, you selected these conditions: " + condIds.join(", ") + " (" + condIds.length + " total)");
				
				if((tagListComboBox.selectedIndex != -1) && (userId == ""  + tagListComboBox.selectedItem['user_id'])) {
					tagName = tagListComboBox.selectedItem['tag'];
					saveTagToDatabase(condIds);
				} else {
					// pop up naming dialog
					if (tagListComboBox.selectedIndex != -1) {
						
					}
					var tagNamingDialog:TagNamingDialog = new TagNamingDialog();
					tagNamingDialog.addEventListener(TagNamedEvent.TAG_NAMED_EVENT, function(event:TagNamedEvent):void {
						tagName = event.tagName;
						saveTagToDatabase(condIds);
					});
					tagNamingDialog.basedOnExisting = (tagListComboBox.selectedIndex != -1);
					PopUpManager.addPopUp(tagNamingDialog, this, true);
					PopUpManager.centerPopUp(tagNamingDialog);
					
				}
				
			}
		
		protected function saveTagToDatabase(condIds:Array):void {
			var savedThis:IFlexDisplayObject = this;
			Util.ajax("main/save_tag", {"tag_name" : tagName, "cond_ids": condIds.join(",")}, function(event:ResultEvent):void {
				PopUpManager.removePopUp(savedThis);
			}, ajaxFault.ajaxFault);
		}
			
		protected function createGridTooltip(event:ListEvent,grid:DataGrid):void {
			var str:String = DataGridItemRenderer(event.itemRenderer).data.name;
			grid.toolTip = str;
		}
		
		protected function deleteGridTooltip(event:ListEvent,grid:DataGrid):void {
			grid.toolTip = null;
		}

			
		]]>
	</mx:Script>
	<mx:Label x="10" y="10" text="Add results to existing tag?"/>
	<mx:ComboBox x="10" y="36" id="tagListComboBox" dataProvider="{tagsAC}" labelField="tag" prompt="Select one..."></mx:ComboBox>
	<mx:Label x="10" y="100" text="Groups (drag to sort):"/>
	<mx:Label x="443" y="100" text="Conditions:"/>
	<mx:Button x="200" y="98" label="-" id="removeGroupButton" click="removeGroups();" toolTip="Remove Groups"/>
	<mx:Button x="658" y="98" label="-" id="removeConditionButton" click="removeConditions()" toolTip="Remove Conditions"/>
	<mx:DataGrid x="10" y="126" id="groupGrid" dataProvider="{groupsAC}" width="341" allowMultipleSelection="true"
		dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" click="groupClick()"
		itemRollOver="createGridTooltip(event,groupGrid)" itemRollOut="deleteGridTooltip(event,groupGrid)">
		<mx:columns>
			<mx:DataGridColumn headerText="Name" dataField="name"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:DataGrid x="359" y="126" id="conditionGrid" dataProvider="{conditionsAC}" allowMultipleSelection="true" width="339" height="156"
		itemRollOver="createGridTooltip(event,conditionGrid)" itemRollOut="deleteGridTooltip(event,conditionGrid)">
		<mx:columns>
			<mx:DataGridColumn headerText="Name" dataField="name"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:Button x="10" y="304" label="Save Tag" id="saveTagButton" click="saveTag()"/>
	<mx:Button x="95" y="304" label="Cancel" id="cancelButton" click="PopUpManager.removePopUp(this)"/>
	
</mx:TitleWindow>
