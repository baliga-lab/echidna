<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="914" height="528"
	xmlns:hc="com.hillelcoren.components.*"
	xmlns:classes="com.hillelcoren.components.autoComplete.classes.*"
	creationComplete="init()" title="Search">
		
		
		<mx:VBox x="24" y="0">
			<mx:Label text="Free text search:"/>
			<hc:AutoComplete id="autoComplete" label="Search" dataProvider="{searchItems}" 
				matchType="anyPart" labelField="name" allowMultipleSelection="true" prompt="Search"
				change="autoCompleteChange(event)" searchChange="autoCompleteSearchChange(event)"
				valueCommit="autoCompleteValueCommit(event)" height="24" width="136">
				
			</hc:AutoComplete>
		</mx:VBox>

	<mx:Button x="10" y="74" label="Search" click="search()"/>
	<mx:Button x="83" y="74" label="Cancel" click="PopUpManager.removePopUp(this)"/>


	<mx:Text x="406" y="55" width="101" id="loadingLabel"/>
	<mx:Label x="24" y="132" text="Structured Search:"/>
	<mx:Label x="40" y="169" text="Knockout:"/>
	<hc:AutoComplete id="knockoutsAutoComplete" x="40" y="185" dataProvider="{knockouts}" allowMultipleSelection="false"
		matchType="anyPart" prompt="None"/>
	<mx:Label x="257" y="169" text="Environmental Perturbation:"/>
	<hc:AutoComplete x="257" y="185" id="envPertAutoComplete" dataProvider="{envPerts}" allowMultipleSelection="false"
		matchType="anyPart" prompt="None"/>
	<mx:CheckBox id="includeRelatedResultsCheckBox" x="40" y="233" label="Include related results (controls, etc)" enabled="true"/>
	<mx:CheckBox id="refineCurrentlyDisplayedResultsCheckBox" x="40" y="263" label="Refine currently displayed results?"/>
	<mx:Button x="40" y="335" label="Structured Search" click="structuredSearch()"/>
	<mx:Button x="177" y="335" label="Cancel" click="PopUpManager.removePopUp(this)"/>
	

	
	<mx:Script>
		<![CDATA[
			import org.systemsbiology.echidna.common.SearchTerms;
			import org.systemsbiology.echidna.common.SubSearch;
			import org.systemsbiology.echidna.common.CurrentlyActiveSearch;
			import mx.core.IFlexDisplayObject;
			import org.systemsbiology.echidna.events.StopProgressBarEvent;
			import org.systemsbiology.echidna.events.SearchResultsReturnedEvent;
			import org.systemsbiology.echidna.events.StartProgressBarEvent;
			import org.systemsbiology.echidna.ui.EchidnaAjaxFault;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import com.adobe.serialization.json.JSON;
			import org.systemsbiology.echidna.common.Util;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			
			
			public var currentlyDisplayedIds:Array;
		
			[Bindable]
			private var searchItems:ArrayCollection;
			
			[Bindable]
			private var knockouts:ArrayCollection;
			
			[Bindable]
			private var envPerts:ArrayCollection;
			
			private var searchArr:Array;
			
			private var loadedSearchTerms:Boolean = false;
			private var loadedKnockouts:Boolean = false;
			private var loadedEnvPerts:Boolean = false;
			
			private var progressBar:ProgressBarDialog;
			
			private var thisWindow:IFlexDisplayObject;
			
			public var currentlyActiveSearch:CurrentlyActiveSearch;
			public var lastResultsOptionSelected:String;
			public var searchTerms:SearchTerms;
			
			//loadedStrains?
			
			private var ajaxFault:EchidnaAjaxFault = new EchidnaAjaxFault();
		
			//todo - cache dropdown stuff so that rendering of dialog is faster
			// need some sort of invalidation so we know whether to refresh cache
					
			private function init():void {
				 thisWindow = this as IFlexDisplayObject;
				
				
				autoComplete.setStyle("selectedItemStyleName", AutoComplete.STYLE_FACEBOOK);
				autoComplete.showRemoveIcon = true;
				autoComplete.setFocus();
				
				knockoutsAutoComplete.setStyle("selectedItemStyleName", AutoComplete.STYLE_FACEBOOK);
				knockoutsAutoComplete.showRemoveIcon = true;
				
				envPertAutoComplete.setStyle("selectedItemStyleName", AutoComplete.STYLE_FACEBOOK);
				envPertAutoComplete.showRemoveIcon = true;

				startProgressBar();
				addEventListener(StopProgressBarEvent.STOP_PROGRESS_BAR_EVENT, function(event:StopProgressBarEvent):void {
					stopProgressBar();
				});

				//Alert.show("lastUpdated = " + searchTerms.lastUpdated);
				
				if (searchTerms.lastUpdated == -1) {
					// go ahead and update here
					setTimestamp();
					update();
				} else {
					// find out if we need to update 
					// todo refactor to remove code duplication (see setTimestamp())
					Util.ajax("main/get_timestamp_from_search_terms", null, function(event:ResultEvent):void {
						var latest:int = (int)(event.result.toString());
						//Alert.show("raw value = " + event.result.toString() + ", latest = " + latest);
						if (latest > searchTerms.lastUpdated) {
							// update
							searchTerms.lastUpdated = latest;
							update();
						} else {
							// we're good
							knockouts = searchTerms.knockouts;
							envPerts = searchTerms.envPerts;
							searchItems = searchTerms.searchTerms;
							stopProgressBar();
						}
						
						
					}, ajaxFault.ajaxFault);
				}
				
				
				
				
			}
			
			private function setTimestamp():void {
					Util.ajax("main/get_timestamp_from_search_terms", null, function(event:ResultEvent):void {
						var latest:int = (int)(event.result.toString());
						//Alert.show("raw value = " + event.result.toString() + ", latest = " + latest);
						
						searchTerms.lastUpdated = latest;
					}, ajaxFault.ajaxFault);				
			}
			
		   private function update():void {
		   		loadSearchTerms();
		   		loadKnockouts();
		   		loadEnvPerts();
				//load strains??
		   }
			
			private function loadSearchTerms():void {
				Util.ajax("main/get_auto_completion_items", null, function(event:ResultEvent):void {
					trace("in get_auto_completion_items callback");
					var ary:Array = JSON.decode(event.result.toString());
					var tmp:ArrayCollection = new ArrayCollection();
					for (var i:int = 0; i < ary.length; i++) {
						var obj:Object = new Object();
						obj['name'] = ary[i];
						tmp.addItem(obj);
					}
					searchItems = tmp;
					searchTerms.searchTerms = searchItems;
					loadedSearchTerms = true;
					tryToStopProgressBar();
					trace("done with get_auto_completion_items callback");
				}, ajaxFault.ajaxFault);
			}
			
			private function loadKnockouts():void {
				Util.ajax("main/get_knockout_names", null, function(event:ResultEvent):void {
					var ary:Array = JSON.decode(event.result.toString());
					var tmp:ArrayCollection = new ArrayCollection();
					tmp.addItem("None");
					for (var i:int = 0; i < ary.length; i++) {
						tmp.addItem(ary[i]);
					}
					knockouts = tmp;
					searchTerms.knockouts = knockouts;
					loadedKnockouts = true;
					tryToStopProgressBar();
				}, ajaxFault.ajaxFault);
			}
			
			
			private function loadEnvPerts():void {
				Util.ajax("main/get_env_pert_names", null, function(event:ResultEvent):void {
					var ary:Array = JSON.decode(event.result.toString());
					var tmp:ArrayCollection = new ArrayCollection();
					tmp.addItem("None");
					for (var i:int = 0; i < ary.length; i++) {
						tmp.addItem(ary[i]);
					}
					envPerts = tmp;
					searchTerms.envPerts = envPerts;
					loadedEnvPerts = true;
					tryToStopProgressBar();					
				}, ajaxFault.ajaxFault);
			}
			
			protected function tryToStopProgressBar():void {
				if (loadedEnvPerts && loadedKnockouts && loadedSearchTerms) {
					stopProgressBar();
				}
			}
			
			
			protected function autoCompleteChange(event:Event):void {
				trace("autoCompleteChange()");
			}
			
			protected function autoCompleteSearchChange(event:Event):void {
				trace("autoCompleteSearchChange()");
			}
			
			protected function autoCompleteValueCommit(event:Event):void {
				trace("autoCompleteValueCommit()");
			}

			protected function search():void {
				trace("autoComplete.searchText = " + autoComplete.searchText);
				if (autoComplete.selectedItems.length == 0 && (autoComplete.searchText == null || autoComplete.searchText == "") ) {
					Alert.show("Nothing to search for!");
					return;
				}
			
				trace("num items selected:" +  autoComplete.selectedItems.length);
				searchArr = new Array();
				for(var i:int = 0; i < autoComplete.selectedItems.length; i++) {
					searchArr.push(autoComplete.selectedItems[i]['name']);
				}
				
				if (searchArr.length == 0) {
					searchArr.push(autoComplete.searchText);
				}
				

				
				var search:String = JSON.encode(searchArr);
				//loadingLabel.text = "Loading...";
				
				
				Util.ajax("main/search_conditions", {"search": search}, searchResult, searchFault);
				var startProgressBarEvent:StartProgressBarEvent = new StartProgressBarEvent(StartProgressBarEvent.START_PROGRESS_BAR_EVENT);
				dispatchEvent(startProgressBarEvent);
			}				
			
			protected function searchResult(event:ResultEvent): void {
				if (event.result.toString() == "none") {
					var stopProgressBarEvent:StopProgressBarEvent = new StopProgressBarEvent(StopProgressBarEvent.STOP_PROGRESS_BAR_EVENT);
					dispatchEvent(stopProgressBarEvent);
					Alert.show("Nothing matches your search.");
					return;
				}
				currentlyActiveSearch.freeTextSearch = searchArr;
				currentlyActiveSearch.isStructured = false; 
				trace("currently active search:\n" + currentlyActiveSearch.toString());
				
				PopUpManager.removePopUp(this);
				var srre:SearchResultsReturnedEvent = new SearchResultsReturnedEvent(SearchResultsReturnedEvent.SEARCH_RESULTS_RETURNED_EVENT);
				srre.searchTerms = searchArr;
				dispatchEvent(srre);
				dispatchEvent(event);
			}
			
			protected function searchFault(event:FaultEvent):void {
				var eaf:EchidnaAjaxFault = new EchidnaAjaxFault();
				eaf.ajaxFault(event);
			}
			
			protected function startProgressBar():void {
				trace("trying to start progress bar...");
				progressBar = ProgressBarDialog(PopUpManager.createPopUp(this, ProgressBarDialog, true));
				PopUpManager.centerPopUp(progressBar);
			}
			
			protected function stopProgressBar():void {
				PopUpManager.removePopUp(progressBar);
			}
			
			protected function structuredSearch():void {
				//todo show progress bar
				if (knockoutsAutoComplete.selectedItems.length == 0 && envPertAutoComplete.selectedItems.length == 0) {
					Alert.show("Empty Search!");
					return;
				}
				startProgressBar();
				var params:Object = new Object();
				params['knockouts'] = knockoutsAutoComplete.selectedItem;
				
				params['env_perts'] = envPertAutoComplete.selectedItem;
				if (refineCurrentlyDisplayedResultsCheckBox.selected) {
					params['currently_displayed_ids'] = JSON.encode(currentlyDisplayedIds);
				}
				params['include_related_results'] = (includeRelatedResultsCheckBox.selected) ? "true" : "false";
				
				Util.ajax("main/structured_search", params, function(event:ResultEvent):void{
					trace("in structured search callback");
					stopProgressBar();
					if (event.result.toString() == "none") {
						Alert.show("Nothing matches your search.");
						return;
					}
					currentlyActiveSearch.isStructured = true;
					
					var subSearch:SubSearch = new SubSearch();
					subSearch.envPert = envPertAutoComplete.selectedItem;
					subSearch.knockout = knockoutsAutoComplete.selectedItem;
					subSearch.includeRelated = includeRelatedResultsCheckBox.selected;
					subSearch.lastResultsOptionSelected = lastResultsOptionSelected;
					
					
					if (refineCurrentlyDisplayedResultsCheckBox.selected) {
						subSearch.refine = true;
						currentlyActiveSearch.subSearches.push(subSearch);
					} else {
						currentlyActiveSearch.subSearches = new Array();
						currentlyActiveSearch.subSearches.push(subSearch);
					} 
					
					trace("currently active search:\n" + currentlyActiveSearch.toString()) ;
					trace("brief name:\n" + currentlyActiveSearch.briefName());
					
					//Alert.show("OK: " + event.result.toString());
					//todo - populate search terms label
					PopUpManager.removePopUp(thisWindow);
					
					
					
					var srre:SearchResultsReturnedEvent = new SearchResultsReturnedEvent(SearchResultsReturnedEvent.SEARCH_RESULTS_RETURNED_EVENT);
					srre.searchTerms  = [currentlyActiveSearch.briefName()];//todo fix mismatch
					dispatchEvent(srre);

					
					dispatchEvent(event);
					
				},ajaxFault.ajaxFault, "POST");
				
			}
			
			
		]]>
	</mx:Script>
	
	
	
</mx:TitleWindow>
