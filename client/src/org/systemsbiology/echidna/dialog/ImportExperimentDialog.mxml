<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="1128" height="742" title="Import Experiment" creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.controls.Button;
			import mx.containers.HBox;
			import mx.controls.ButtonBar;
			import mx.core.ScrollPolicy;
			import org.systemsbiology.echidna.ui.ConditionPanel;
			import mx.collections.ArrayCollection;
			import com.adobe.serialization.json.JSON;
			import org.systemsbiology.echidna.events.StopProgressBarEvent;
			import mx.controls.ProgressBar;
			import org.systemsbiology.echidna.events.ImportStatusEvent;
			import org.systemsbiology.echidna.events.GetConditionsEvent;
			import mx.core.IFlexDisplayObject;
			import mx.managers.PopUpManager;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			import org.systemsbiology.echidna.ui.EchidnaAjaxFault;
			import org.systemsbiology.echidna.common.Util;
			[Bindable]
			public var projectId:String;
			[Bindable]
			public var dateDir:String;
		
			private var ajaxFault:EchidnaAjaxFault = new EchidnaAjaxFault();
			
			private var thisWindow:IFlexDisplayObject = IFlexDisplayObject(this);
			
			public var testMode:Boolean = false;
			
			private var progressBar:ProgressBarDialog = new ProgressBarDialog();
			
			
			private  var names:ArrayCollection;
			private var units:ArrayCollection;
			
			private var gotBoth:Boolean = false;
			private var alreadyImported:Boolean = false;
			private var doneWithImport:Boolean = false;
			private var checkedForPriorImport:Boolean = false;
			private var proceedCalledAlready:Boolean = false;
			
			private function init():void {
				 ajaxFault.addEventListener(StopProgressBarEvent.STOP_PROGRESS_BAR_EVENT, function(event:StopProgressBarEvent):void {
				 	stopProgressBar();
				 });

				
				getStuff("main/get_controlled_vocab_names", true);
				getStuff("main/get_units", false);
				
				addEventListener(ImportStatusEvent.IMPORT_STATUS_EVENT, function(event:ImportStatusEvent):void {
					checkedForPriorImport = true;
					if (event.alreadyImported) {
						alreadyImported = true;
						Alert.show("This experiment has already been imported into Echidna.", "Error", Alert.OK, null, function():void {
							PopUpManager.removePopUp(thisWindow);
							var gce:GetConditionsEvent = new GetConditionsEvent(GetConditionsEvent.GET_CONDITIONS_EVENT);
							dispatchEvent(gce);
						});
						return;
					} else {
						//importExperiment();
						proceed();
					}
				});
			}
			
			protected function proceed():void {
				if (alreadyImported) return;
				
				
				
				if (gotBoth && checkedForPriorImport && (!proceedCalledAlready)) {
					proceedCalledAlready = true;
					importExperiment();
				}
			}
			
			protected function getStuff(url:String, namesFlag:Boolean):void {
				Util.ajax(url, null, function(event:ResultEvent):void {
					trace("in getStuff callback function with url = " + url);
					var tmp:Array = JSON.decode(event.result.toString());
					var tmpAC:ArrayCollection = new ArrayCollection();
					for (var i:int = 0; i < tmp.length; i++) {
						var o:Object = new Object();
						o['label'] = tmp[i];
						tmpAC.addItem(o);
					}
					if (namesFlag) {
						names = tmpAC;
					} else {
						units = tmpAC;
					}
					if (names != null && units != null) {
						gotBoth = true;
					}
					proceed();
				}, ajaxFault.ajaxFault);
				
			}
			
			
			//gets called from external code
			public function beginImport():void {
				checkForPriorImport();
			}
			
			
			
			

			public function importExperiment():void {
				trace("in importExperiment");
				
				startProgressBar();
				
				Util.ajax("main/import_from_pipeline",
					{"sbeams_id" : projectId,
					 "sbeams_timestamp": dateDir,
					 "test_mode" : testMode}, function(event:ResultEvent):void {
					 	stopProgressBar();
					 	var groupObj:Object = JSON.decode(event.result.toString());
					 	var cg:Object = groupObj['condition_group'];
					 	var conditions:Array = cg['conditions'];
					 	trace("there are " + conditions.length + " conditions");
					 	var groupNameStr:String = cg['name'];
					 	trace("imported group id = " + cg['id']); 
					 	loadingLabel.text = "";
					 	groupNameText.text = cg['name'];
					 	
					 	trace("units size: " + units.length);
					 	trace("name size: " + names.length);
					 	
					 	for (var i:int = 0; i < conditions.length; i++) {
					 		var cpanel:ConditionPanel = new ConditionPanel();
					 		cpanel.horizontalScrollPolicy = ScrollPolicy.OFF;
					 		conditionsVBox.addChild(cpanel);
					 		cpanel.horizontalScrollPolicy = ScrollPolicy.OFF;
					 		cpanel.names = names;
					 		cpanel.units = units;
					 		var condition:Object = conditions[i]['condition'];
					 		trace("cond name = " + condition['name']);
					 		var conditionName:String = condition['name'];
					 		if (testMode) {
					 			conditionName += "_test";
					 		}
					 		cpanel.conditionName = conditionName;
					 		
					 		//cpanel._conditionNameText.text = "blah";
					 		//cpanel.conditionName = "blah";
					 	}
					 	var hbox:HBox = new HBox();
					 	conditionsVBox.horizontalScrollPolicy = ScrollPolicy.OFF;
					 	var saveButton:Button = new Button();
					 	saveButton.label = "Save";
					 	saveButton.toolTip = "Save";
					 	saveButton.addEventListener(FlexEvent.BUTTON_DOWN,save);
					 	hbox.addChild(saveButton);
					 	var cancelButton:Button = new Button();
					 	cancelButton.addEventListener(FlexEvent.BUTTON_DOWN, cancel);
					 	cancelButton.label = "Cancel";
					 	cancelButton.toolTip = "Cancel";
					 	hbox.addChild(cancelButton);
					 	//addChild(hbox);
					 	conditionsVBox.addChild(hbox);
					 	for (var z:int = 0; z < 10; z++) {
					 		var l:Label = new Label();
					 		l.text = "hi! ";
					 		conditionsVBox.addChild(l);
					 	}
					 	
					 	
					 	
					 }, ajaxFault.ajaxFault);
			} 

			
			protected function checkForPriorImport():void {
				var evt:ImportStatusEvent = new ImportStatusEvent(ImportStatusEvent.IMPORT_STATUS_EVENT);
				// todo remove this at some point
				if (testMode) {
					evt.alreadyImported = false;
					dispatchEvent(evt);
					return;
				}
				// todo remove this at some point^^^
				
				Util.ajax("main/has_been_imported_already",{"projectId":projectId,"dateDir":dateDir},function(event:ResultEvent):void {
					if (event.result.toString() == "true") {
						evt.alreadyImported = true;
					} else {
						evt.alreadyImported = false;
					}
					dispatchEvent(evt);
				},ajaxFault.ajaxFault);
			}
			
			protected function startProgressBar():void {
				trace("trying to start progress bar...");
				progressBar = ProgressBarDialog(PopUpManager.createPopUp(this, ProgressBarDialog, true));
				PopUpManager.centerPopUp(progressBar);
			}
			
			protected function stopProgressBar():void {
				PopUpManager.removePopUp(progressBar);
			}

			protected function save():void {
				
			}
			
			protected function cancel():void {
				PopUpManager.removePopUp(this);
			}
			
			
		]]>
	</mx:Script>
	<mx:Label x="10" y="10" text="SBEAMS Project ID:"/>
	<mx:Text x="163" y="10" id="sbeamsProjectIdText" width="107" text="{projectId}"/>
	<mx:Label x="10" y="36" text="SBEAMS Timestamp:"/>
	<mx:Text x="163" y="36" width="180" id="sbeamsDateDirText" text="{dateDir}"/>
	<mx:Label x="10" y="62" text="Loading data, this will take several minutes..." id="loadingLabel"/>
	<mx:VBox x="10" y="88" height="110" width="657" borderStyle="solid" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
		<mx:CheckBox label="Make a new Condition Group containing these conditions?" width="379" selected="true" id="makeNewGroupCheckbox"/>
		<mx:CheckBox label="Is this a time series?" id="isTimeSeriesCheckbox"/>
		<mx:HBox width="493">
			<mx:Label text="Group Name:"/>
			<mx:TextInput width="377" id="groupNameText"/>
		</mx:HBox>
	</mx:VBox>
	<mx:Label x="10" y="206" text="Conditions:"/>
	<mx:VBox x="10" y="232" height="10%" width="657" id="conditionsVBox" verticalScrollPolicy="off">
	</mx:VBox>
</mx:TitleWindow>
